<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.7.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-06-18T21:17:36-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Ferg in the Clouds</title><subtitle>A site collecting my professional accomplishments, lessons learned, and thoughts I've found interesting over the years.</subtitle><author><name>Dan Ferguson</name></author><entry><title type="html">Snowflake External Functions</title><link href="http://localhost:4000/posts/snowflake-external-functions" rel="alternate" type="text/html" title="Snowflake External Functions" /><published>2020-06-16T00:00:00-04:00</published><updated>2020-06-16T00:00:00-04:00</updated><id>http://localhost:4000/posts/snowflake-external-functions</id><content type="html" xml:base="http://localhost:4000/posts/snowflake-external-functions">&lt;p&gt;Snowflake is a cloud-based data warehousing company.  They specialize in provisioning on-demand compute and elastic storage for data warehousing applications on a pay-per-use pricing model.  &lt;a href=&quot;https://www.analytics.today/blog/oracle-vs-snowflake&quot;&gt;In recent years&lt;/a&gt; they’ve dominated the &lt;a href=&quot;https://www.prnewswire.com/news-releases/snowflake-more-than-triples-revenue-and-customer-base-doubles-post-money-valuation-all-in-just-one-year-300793857.html&quot;&gt;cloud data-warehouse&lt;/a&gt; industry.  Recently they announced a few new product features.  In this post, we’re going to discuss one of those features, External Functions.&lt;/p&gt;
&lt;h2 id=&quot;external-functions&quot;&gt;External Functions&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.snowflake.com/en/sql-reference/external-functions-introduction.html&quot;&gt;External Functions&lt;/a&gt; in Snowflake are functions hosted on a different platform.  What does this mean?  Let’s break it down.
&lt;a href=&quot;https://docs.snowflake.com/en/sql-reference/user-defined-functions.html&quot;&gt;Functions&lt;/a&gt; are pieces of Javascript or SQL code that execute in your data warehouse.  The code itself is written by developers and is intended to add features and functionality to your data warehouse, beyond the traditional SQL commands that Snowflake already offers.  External Functions are similar, except they are not hosted on Snowflake, and do not execute within the context of your data warehouse.  Instead, they are hosted elsewhere, accessed via an HTTP endpoint, and computed using third-party compute resources.  When making a call to a function, the value is computed using Snowflake’s compute resources.  External Function values are computed using external resources, and the results are returned via HTTP.
For example, if you had access to an external service that mapped zip codes to cities, the typical approach to leveraging this service without external functions would be to import the keys and values of cities and zip-codes to a table and then query that table.  Then you could select cities from the &lt;code class=&quot;highlighter-rouge&quot;&gt;zipcode_to_city&lt;/code&gt; table where the zip-code is some value.  For example,&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Create the table &lt;code class=&quot;highlighter-rouge&quot;&gt;zipcode_to_city&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Create an ETL pipeline that batch loads &lt;code class=&quot;highlighter-rouge&quot;&gt;zipcode_to_city&lt;/code&gt; with the zipcodes and cities from your source system.&lt;/li&gt;
  &lt;li&gt;Automate this ETL pipeline to update the table when/if changes happen.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;highlighter-rouge&quot;&gt;select city from zipcode_to_city where zip = '11102';&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;(Optional) Create a function that replaces this query for you in other queries.
This is standard practice for integrating databases with external systems.  The problem here is you have to maintain an ETL pipeline to keep your downstream database up to date.  Additionally, you have another table to query which could impact the performance of queries downstream.  Now imagine having to do this for several external systems of record beyond just zip code - city mappings.  It’s easy to see how this could get complicated quickly.
Now, with external functions, you can create the &lt;code class=&quot;highlighter-rouge&quot;&gt;zipcode_to_city_external_function&lt;/code&gt; and get the same data as you would have if you imported the table.  The only difference now is that instead of importing a table to Snowflake, you import only the data you need, when you need it, via HTTPS.  After configuring your function (which we’ll see how to do later), you can call it in SQL like this:
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;select&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipcode_to_city_external_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zipcode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The function &lt;code class=&quot;highlighter-rouge&quot;&gt;zipcode_to_city_external_function&lt;/code&gt; replaces the typical call to your reference table and the value is imported and used in the rest of your SQL statement.  Now you don’t have to maintain a reference table of zip-code – city mappings because you’ve offloaded that functionality to a third-party service.&lt;/p&gt;
    &lt;h2 id=&quot;creating-an-external-function&quot;&gt;Creating an External Function&lt;/h2&gt;
    &lt;p&gt;I’m not going to spend time breaking out syntax associated with creating an external function.  If you want to know the syntax options, check the Snowflake documentation associated with &lt;a href=&quot;https://docs.snowflake.com/en/sql-reference/sql/create-external-function.html#usage-notes&quot;&gt;External Functions&lt;/a&gt;.  Instead, I’ll go through the typical workflow required to create and use an External Function on AWS.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Configure access to external function (IAM)&lt;/li&gt;
  &lt;li&gt;Create an API Integration object in Snowflake (API Gateway)&lt;/li&gt;
  &lt;li&gt;Create the External Function
    &lt;h3 id=&quot;configuring-access&quot;&gt;Configuring Access&lt;/h3&gt;
    &lt;p&gt;The first thing to do is to create the IAM assets used by Snowflake to make calls to your AWS hosted function.  Due to limitations we’ll explore later in this post, Snowflake must call API Gateway.  As a result, we’ll create this policy where you’ll specify your own hosting API ARN:&lt;/p&gt;
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Sid&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;VisualEditor0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apigateway:DELETE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apigateway:PUT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apigateway:PATCH&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apigateway:POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
             &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apigateway:GET&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
         &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Resource&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;API GATEWAY ARN&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Now we create a role.  This role is a little different from your typical role as it requires access from a third party.  Note in the image below we select “Another AWS account” as the trusted entity, specifying a dummy ID in the external ID field.  When creating this role, specify your own account’s Account ID in the Account ID field.  After you’ve done this, add the policy we created above to this role and complete the role creation.
&lt;a href=&quot;https://blog.ippon.tech/content/images/2020/06/Screen-Shot-2020-06-15-at-10.29.03-AM.png&quot;&gt;!&lt;/a&gt;&lt;/p&gt;
    &lt;h3 id=&quot;configure-snowflake-side-access&quot;&gt;Configure Snowflake-Side Access&lt;/h3&gt;
    &lt;p&gt;What we’ve done to this point is setup a templated access to AWS from Snowflake on the AWS side.  There’s still some configuration we need to create on the Snowflake side before we can go back and finalize our AWS configuration.&lt;br /&gt;
External Functions require a Snowflake construct called an &lt;a href=&quot;https://docs.snowflake.com/en/sql-reference/sql/create-api-integration.html&quot;&gt;API Integration&lt;/a&gt;.  These constructs are logical endpoints within Snowflake that store references to external APIs.  See the below code snippet for more information.&lt;/p&gt;
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTEGRATION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;external_integration&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;API_PROVIDER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aws_api_gateway&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;API_AWS_ROLE_ARN&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;ARN OF ROLE CREATED BEFORE&amp;gt;'&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;ENABLED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TRUE&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;API_ALLOWED_PREFIXES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'&amp;lt;API GATEWAY DEPLOYMENT URL'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'AWS Hosted API Gateway Integration'&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;By running this snippet and replacing the values referenced with the role we created earlier and the API deployment that hosts your external function, we have created an API Integration.  This is important for configuring access for the external function later on.&lt;br /&gt;
Once this stage is created, we need to gather some information about it.  Run the following command and be sure to save the output for your reference:&lt;/p&gt;
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;DESC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;API&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;INTEGRATION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;external_integration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The output for this command shows some meta-data about the API Integration that we specified when creating the integration.  It also includes two important fields called &lt;strong&gt;API_AWS_EXTERNAL_ID&lt;/strong&gt; and &lt;strong&gt;API_AWS_IAM_USER_ARN&lt;/strong&gt;.  We’ll need these fields to continue configuring access  to AWS.  Record these field values and return to the AWS IAM console.&lt;/p&gt;
    &lt;h3 id=&quot;modifying-aws-access&quot;&gt;Modifying AWS Access&lt;/h3&gt;
    &lt;p&gt;Go back to AWS IAM and modify the role we created at the beginning of this post.  Navigate to the “Trust Relationship” tab and edit this policy.  When you open the policy document, it should look something like this:&lt;/p&gt;
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Principal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AWS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;YOUR ACCOUNBT ID&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sts:AssumeRole&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Condition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;StringEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sts:ExternalId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;DUMMY ID&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Replace the ARN containing your Account ID with the &lt;strong&gt;API_AWS_IAM_USER_ARN&lt;/strong&gt; value from the previous query we ran in Snowflake.  Then replace the Dummy ID with the &lt;strong&gt;API_AWS_EXTERNAL_ID&lt;/strong&gt; from the previous query.  The results should look like the following:&lt;/p&gt;
    &lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2012-10-17&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Statement&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Effect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Allow&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Principal&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;AWS&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;API_AWS_IAM_USER_ARN&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Action&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sts:AssumeRole&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Condition&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;StringEquals&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sts:ExternalId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;API_AWS_EXTERNAL_ID&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;What this does is allow the Snowflake asset you created with the &lt;strong&gt;API_AWS_EXTERNAL_ID&lt;/strong&gt; and &lt;strong&gt;API_AWS_IAM_USER_ARN&lt;/strong&gt; specified to assume the role with the permissions we gave it.  Based on this blog post, that means access to call an API Gateway endpoint.  If you modify this role to have new policies though, that means you will grant this third party service all of those new policies.  For more details,  check out this how-to guide published by Snowflake on this topic.&lt;/p&gt;
    &lt;h3 id=&quot;creating-the-external-function&quot;&gt;Creating the External Function&lt;/h3&gt;
    &lt;p&gt;After all that back and forth, this is the easy part.  Following the &lt;a href=&quot;https://docs.snowflake.com/en/sql-reference/sql/create-external-function.html#usage-notes&quot;&gt;syntax for an External Function&lt;/a&gt;, we should be sending something like the following to Snowflake:&lt;/p&gt;
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OR&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;REPLACE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SECURE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;EXTERNAL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;FUNCTION&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipcode_to_city_external_function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zipcode&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;RETURNS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VARCHAR&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;RETURNS&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INPUT&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;VOLATILE&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;COMMENT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Returns a city for the given zip-code.'&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;API_INTEGRATION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;external_integration&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;HEADERS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'content-type'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'application/json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;AS&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&amp;lt;API ENDPOINT URL&amp;gt;'&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;Notice how we specify an empty list of parameters, a return type, and the API Integration object we created earlier.  The API Integration object allows this external function to assume the role we specified, giving Snowflake the ability to query API Gateway as an external service.
To use this external function, all we have to do is call our function like you would any User-Defined Function:&lt;/p&gt;
    &lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;SELECT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;zipcode_to_city_external_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;&quot;11102&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;p&gt;The results of this function call will vary based on the back-end implementation, but in my demo the result is:&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-csv&quot;&gt;ZIPCODE_TO_CITY_EXTERNAL_FUNCTION(&quot;11102&quot;)
ASTORIA
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;The following is the backend implementation for this endpoint:&lt;/p&gt;
    &lt;pre&gt;&lt;code class=&quot;language-nodejs&quot;&gt;exports.handler = async (event) =&amp;gt; {

 // MAGIC HAPPENS HERE
 city = CALL_TO_CITY_ZIP_MAPPER(event)
 const response = {
     data: [
         [0, city]
     ]
 };
 return response;
};
&lt;/code&gt;&lt;/pre&gt;
    &lt;p&gt;Obviously this is a hard-coded example.  I’ve hard-coded the response here to show the formatting of a response that Snowflake expects.  If you do not format your output like this you’ll get an error like &lt;code class=&quot;highlighter-rouge&quot;&gt;external function top-level JSON object must contain &quot;data&quot; JSON array element&lt;/code&gt;.   This may seem strange at first, but it makes a lot of sense when you break it down.  Snowflake is, at the end of the day, a database.  It stores data in a structured way; when it integrates with third parties it expects the third party to respect that data quality requirement.  As a result, we have this strange JSON-esque syntax being returned by the lambda function.  For more information on this, check out Snowflake’s documentation about &lt;a href=&quot;https://docs.snowflake.com/en/sql-reference/external-functions-general.html#data-format-sent-from-snowflake&quot;&gt;creating External Functions for different platforms&lt;/a&gt;.&lt;/p&gt;
    &lt;h2 id=&quot;limitations--gotchas-to-external-functions&quot;&gt;Limitations &amp;amp; Gotcha’s to External Functions&lt;/h2&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   * External Functions need to be called through an HTTP proxy service.  This service is referenced in the API_INTEGRATION field.  Currently, the only supported API Integration objects are those hosted on API Gateway.
   * External Function calls cannot be used to define the default value of a column when creating a table.
   * External Functions must return scalar values that match the return type of the external function.  Returned values must also match the number of rows which are being used.
   * External Functions always make POST requests.
   * The top-level response must be a series of name-value pairs sent as a JSON array labeled &quot;data.&quot;
   * Lambda functions that integrate with API Gateway by proxy will have to include the expected API Gateway response object, as well as the expected Snowflake data object.
   * Backend integrations do not have to be Lambda functions, they just have to be hosted via API Gateway (at this time).
   * If you ever re-create your API Integration object in Snowflake, you will have to modify the IAM role.  You just have to modify the API_AWS_EXTERNAL_ID, the API_AWS_IAM_USER_ARN field should stay the same (unless your Snowflake user changes).  For more details on the limitations of external functions, and the additional considerations you should take when creating external functions, check the [Snowflake documentation](https://docs.snowflake.com/en/sql-reference/external-functions-introduction.html#limitations-of-external-functions) on the subject.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>Dan Ferguson</name></author><summary type="html">Snowflake is a cloud-based data warehousing company. They specialize in provisioning on-demand compute and elastic storage for data warehousing applications on a pay-per-use pricing model. In recent years they’ve dominated the cloud data-warehouse industry. Recently they announced a few new product features. In this post, we’re going to discuss one of those features, External Functions. External Functions External Functions in Snowflake are functions hosted on a different platform. What does this mean? Let’s break it down. Functions are pieces of Javascript or SQL code that execute in your data warehouse. The code itself is written by developers and is intended to add features and functionality to your data warehouse, beyond the traditional SQL commands that Snowflake already offers. External Functions are similar, except they are not hosted on Snowflake, and do not execute within the context of your data warehouse. Instead, they are hosted elsewhere, accessed via an HTTP endpoint, and computed using third-party compute resources. When making a call to a function, the value is computed using Snowflake’s compute resources. External Function values are computed using external resources, and the results are returned via HTTP. For example, if you had access to an external service that mapped zip codes to cities, the typical approach to leveraging this service without external functions would be to import the keys and values of cities and zip-codes to a table and then query that table. Then you could select cities from the zipcode_to_city table where the zip-code is some value. For example, Create the table zipcode_to_city. Create an ETL pipeline that batch loads zipcode_to_city with the zipcodes and cities from your source system. Automate this ETL pipeline to update the table when/if changes happen. Run select city from zipcode_to_city where zip = '11102';. (Optional) Create a function that replaces this query for you in other queries. This is standard practice for integrating databases with external systems. The problem here is you have to maintain an ETL pipeline to keep your downstream database up to date. Additionally, you have another table to query which could impact the performance of queries downstream. Now imagine having to do this for several external systems of record beyond just zip code - city mappings. It’s easy to see how this could get complicated quickly. Now, with external functions, you can create the zipcode_to_city_external_function and get the same data as you would have if you imported the table. The only difference now is that instead of importing a table to Snowflake, you import only the data you need, when you need it, via HTTPS. After configuring your function (which we’ll see how to do later), you can call it in SQL like this: select zipcode_to_city_external_function(zipcode); The function zipcode_to_city_external_function replaces the typical call to your reference table and the value is imported and used in the rest of your SQL statement. Now you don’t have to maintain a reference table of zip-code – city mappings because you’ve offloaded that functionality to a third-party service. Creating an External Function I’m not going to spend time breaking out syntax associated with creating an external function. If you want to know the syntax options, check the Snowflake documentation associated with External Functions. Instead, I’ll go through the typical workflow required to create and use an External Function on AWS. Configure access to external function (IAM) Create an API Integration object in Snowflake (API Gateway) Create the External Function Configuring Access The first thing to do is to create the IAM assets used by Snowflake to make calls to your AWS hosted function. Due to limitations we’ll explore later in this post, Snowflake must call API Gateway. As a result, we’ll create this policy where you’ll specify your own hosting API ARN: { &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ { &quot;Sid&quot;: &quot;VisualEditor0&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: [ &quot;apigateway:DELETE&quot;, &quot;apigateway:PUT&quot;, &quot;apigateway:PATCH&quot;, &quot;apigateway:POST&quot;, &quot;apigateway:GET&quot; ], &quot;Resource&quot;: &quot;&amp;lt;API GATEWAY ARN&amp;gt;&quot; } ] } Now we create a role. This role is a little different from your typical role as it requires access from a third party. Note in the image below we select “Another AWS account” as the trusted entity, specifying a dummy ID in the external ID field. When creating this role, specify your own account’s Account ID in the Account ID field. After you’ve done this, add the policy we created above to this role and complete the role creation. ! Configure Snowflake-Side Access What we’ve done to this point is setup a templated access to AWS from Snowflake on the AWS side. There’s still some configuration we need to create on the Snowflake side before we can go back and finalize our AWS configuration. External Functions require a Snowflake construct called an API Integration. These constructs are logical endpoints within Snowflake that store references to external APIs. See the below code snippet for more information. CREATE API INTEGRATION IF NOT EXISTS external_integration API_PROVIDER = aws_api_gateway API_AWS_ROLE_ARN = '&amp;lt;ARN OF ROLE CREATED BEFORE&amp;gt;' ENABLED = TRUE API_ALLOWED_PREFIXES = ('&amp;lt;API GATEWAY DEPLOYMENT URL') COMMENT = 'AWS Hosted API Gateway Integration' ; By running this snippet and replacing the values referenced with the role we created earlier and the API deployment that hosts your external function, we have created an API Integration. This is important for configuring access for the external function later on. Once this stage is created, we need to gather some information about it. Run the following command and be sure to save the output for your reference: DESC API INTEGRATION external_integration; The output for this command shows some meta-data about the API Integration that we specified when creating the integration. It also includes two important fields called API_AWS_EXTERNAL_ID and API_AWS_IAM_USER_ARN. We’ll need these fields to continue configuring access to AWS. Record these field values and return to the AWS IAM console. Modifying AWS Access Go back to AWS IAM and modify the role we created at the beginning of this post. Navigate to the “Trust Relationship” tab and edit this policy. When you open the policy document, it should look something like this: { &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ { &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: { &quot;AWS&quot;: &quot;&amp;lt;YOUR ACCOUNBT ID&amp;gt;&quot; }, &quot;Action&quot;: &quot;sts:AssumeRole&quot;, &quot;Condition&quot;: { &quot;StringEquals&quot;: { &quot;sts:ExternalId&quot;: &quot;&amp;lt;DUMMY ID&amp;gt;&quot; } } } ] } Replace the ARN containing your Account ID with the API_AWS_IAM_USER_ARN value from the previous query we ran in Snowflake. Then replace the Dummy ID with the API_AWS_EXTERNAL_ID from the previous query. The results should look like the following: { &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ { &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: { &quot;AWS&quot;: &quot;&amp;lt;API_AWS_IAM_USER_ARN&amp;gt;&quot; }, &quot;Action&quot;: &quot;sts:AssumeRole&quot;, &quot;Condition&quot;: { &quot;StringEquals&quot;: { &quot;sts:ExternalId&quot;: &quot;&amp;lt;API_AWS_EXTERNAL_ID&amp;gt;&quot; } } } ] } What this does is allow the Snowflake asset you created with the API_AWS_EXTERNAL_ID and API_AWS_IAM_USER_ARN specified to assume the role with the permissions we gave it. Based on this blog post, that means access to call an API Gateway endpoint. If you modify this role to have new policies though, that means you will grant this third party service all of those new policies. For more details, check out this how-to guide published by Snowflake on this topic. Creating the External Function After all that back and forth, this is the easy part. Following the syntax for an External Function, we should be sending something like the following to Snowflake: CREATE OR REPLACE SECURE EXTERNAL FUNCTION zipcode_to_city_external_function (zipcode VARCHAR) RETURNS VARCHAR NOT NULL RETURNS NULL ON NULL INPUT VOLATILE COMMENT = 'Returns a city for the given zip-code.' API_INTEGRATION = external_integration HEADERS = ('content-type' = 'application/json') AS '&amp;lt;API ENDPOINT URL&amp;gt;' ; Notice how we specify an empty list of parameters, a return type, and the API Integration object we created earlier. The API Integration object allows this external function to assume the role we specified, giving Snowflake the ability to query API Gateway as an external service. To use this external function, all we have to do is call our function like you would any User-Defined Function: SELECT zipcode_to_city_external_function(&quot;11102&quot;); The results of this function call will vary based on the back-end implementation, but in my demo the result is: ZIPCODE_TO_CITY_EXTERNAL_FUNCTION(&quot;11102&quot;) ASTORIA The following is the backend implementation for this endpoint: ```nodejs exports.handler = async (event) =&amp;gt; {</summary></entry><entry><title type="html">Building a HIPAA Compliant Message Bus with Solace</title><link href="http://localhost:4000/posts/hipaa-compliant-message-bus" rel="alternate" type="text/html" title="Building a HIPAA Compliant Message Bus with Solace" /><published>2020-03-18T00:00:00-04:00</published><updated>2020-03-18T00:00:00-04:00</updated><id>http://localhost:4000/posts/hipaa-compliant</id><content type="html" xml:base="http://localhost:4000/posts/hipaa-compliant-message-bus">&lt;h2 id=&quot;what-is-solace&quot;&gt;What is Solace?&lt;/h2&gt;
&lt;p&gt;Solace are the makers of the Solace PubSub+ Platform which is used to event enable your enterprise. The core of the platform is the Solace PubSub+ Advanced Event Broker that comes in hardware, software, and messaging as a service in your favorite public cloud.&lt;/p&gt;

&lt;h2 id=&quot;cloud-native-solace&quot;&gt;Cloud-Native Solace&lt;/h2&gt;
&lt;p&gt;In the last few years, Solace has begun investing heavily into cloud based messaging solutions. Using tools like the Solace Cloud Console, you can quickly provision redundant and secure virtual solace appliances in any cloud you choose. But Solace messaging isn’t just fast, it is reliable, extensible, and secure. Solace virtual routers can seamlessly be deployed as an HA pair in a single region and DR can be setup across regions to ensure availability constraints that your enterprise demands. Solace routers support nearly every major messaging protocol, the list of protocols not supported is shorter than list of protocols that are. Solace routers are also secure. Administrative access for a private cloud deployment is as secure as the EC2 instances in your Amazon console.
&lt;img src=&quot;https://blog.ippon.tech/content/images/2020/02/Solace-PubSub-Platform-Diagram-1.png&quot; alt=&quot;&quot; /&gt;
All of these built-in features, coupled with native cloud deployments with a very generous free-tier, make Solace an obvious option for businesses outside the financial space.  Companies spend thousands of dollars and person-hours building reliable messaging deployments that are secure and cost-effective.  Now you can have those features at the click of a button thanks to the cloud.  (Check out my last article talking about exactly how easy it is to do this.)  But not every business vertical is convinced cloud-based solutions like Solace fit their needs.  One of those  business verticals is healthcare and insurance.  The real question for these verticals is around HIPAA.  In this article we’ll discuss what HIPAA is and why Solace is absolutely a viable choice for messaging in a HIPAA compliant environment.  By taking the time to properly configure your PubSub+ services, achieving HIPAA compliance with Solace is quite straightforward. I’ll show you how to get started in this article.&lt;/p&gt;

&lt;h2 id=&quot;what-is-hipaa&quot;&gt;What is HIPAA?&lt;/h2&gt;
&lt;p&gt;HIPAA, or Health Insurance Portability and Accountability Act, is a piece of legislation passed in 1996 that puts regulation around the security of Personal Health Information (PHI).  Health insurance organizations deal with PHI all the time, this is the very nature of an insurance claim.  In the 24 years since this legislation was made law, the digital world has changed drastically, but compliance requirements remain the same.  For a full list of HIPAA compliance requirements, check out this website.  The list of requirements are extensive, but they do boil down to the following short-list of absolute necessities.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Implement a means of access control. This not only means assigning a centrally-controlled unique username and PIN code for each user, but also establishing procedures to govern the release or disclosure of ePHI during an emergency.&lt;/li&gt;
  &lt;li&gt;Introduce activity logs and audit controls. The audit controls required under the technical safeguards are there to register attempted access to ePHI and record what is done with that data once it has been accessed&lt;/li&gt;
  &lt;li&gt;Enforce policies for the use/positioning of workstations.  Policies must be devised and implemented to restrict the use of workstations that have access to ePHI, to specify the protective surrounding of a workstation and govern how functions are to be performed on the workstations.&lt;/li&gt;
  &lt;li&gt;Enforce policies and procedures for mobile devices. If users are allowed to access ePHI from their mobile devices, policies must be devised and implemented to govern how ePHI is removed from the devices if the user leaves the organization or the device is re-used, sold, etc.&lt;/li&gt;
  &lt;li&gt;Conduct regular risk assessments. Among the Security Officer´s main tasks is the compilation of a risk assessment to identify every area in which ePHI is being used, and to determine all of the ways in which breaches of ePHI could occur.&lt;/li&gt;
  &lt;li&gt;Introducing a risk management policy. The risk assessment must be repeated at regular intervals with measures introduced to reduce the risks to an appropriate level. A sanctions policy for employees who fail to comply with HIPAA regulations must also be introduced.&lt;/li&gt;
  &lt;li&gt;Develop a contingency plan. In the event of an emergency, a contingency plan must be ready to enable the continuation of critical business processes while protecting the integrity of ePHI while an organization operates in emergency mode.&lt;/li&gt;
  &lt;li&gt;Restrict third-party access. It is vital to ensure ePHI is not accessed by unauthorized parent organizations and subcontractors, and that Business Associate Agreements are signed with business partners who will have access to ePHI.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;assessment-assumptions&quot;&gt;Assessment Assumptions&lt;/h2&gt;
&lt;p&gt;This article is about defining a HIPAA compliant Solace implementation for companies dealing with PHI.  Let’s define what a typical environment would look like for a company like this.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;User login to applications is handled by a central authentication/authorization platform like LDAP or Active Directory.&lt;/li&gt;
  &lt;li&gt;Applications all have their own usernames for the various integrations they possess, but end user activity is still logged and tracked for audit and control purposes.&lt;/li&gt;
  &lt;li&gt;Datastores, third party integrations, and application integrations have a application-user level permissions.  A typical example would be grants to select data from a table in a database for a specific application.&lt;/li&gt;
  &lt;li&gt;The company bound to HIPAA compliance is presumed to have a secure network from within the physical premises of the company.  Remote logins are secured through IPSec, VPNs, or some other secure communication protocol.&lt;/li&gt;
  &lt;li&gt;Applications used by the organization are already HIPAA compliant.&lt;/li&gt;
  &lt;li&gt;The organization already has a HIPAA compliant cloud-adoption policy in place that honors the phyical requirements of a HIPAA compliant workspace.&lt;/li&gt;
  &lt;li&gt;The organization already has a HIPAA Risk Assessment &amp;amp; Management Policy in place that can be applied to new services like PubSub+.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This list of 5 assumptions about an organization trying to be HIPAA compliant is fairly general.  Federated user login, application activity logging, intelligent access controls around data, and secure networking are all standard requirements for any business that makes money from data.  PHI data and Insure-tech companies are no exception.  Given the above mentioned general settings for an organization, we will discuss how the required aspects of HIPAA can be honored in a Solace Cloud deployment.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;TLS / encryption to secure PHI/PII data in transit)&lt;/li&gt;
  &lt;li&gt;Encrypted storage to secure PHI/PII data at rest&lt;/li&gt;
  &lt;li&gt;Fine-grained access controls to govern and ensure only authorized systems can publish data and can receive data&lt;/li&gt;
  &lt;li&gt;Auditing of changes to security configurations&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;technical-safeguards&quot;&gt;Technical Safeguards&lt;/h2&gt;
&lt;h3 id=&quot;implement-a-means-of-access-control&quot;&gt;Implement a Means of Access Control&lt;/h3&gt;
&lt;p&gt;Access control in Solace is a built-in, out of the box component of Solace.  Access control on Solace are baked in down to the underlying operating system.  For cloud deployments however, the true HIPAA compliant access control comes from User Authentication/Authorization, ACLs, and Client-Profiles.
Authenticating against a Solace appliance can be done a number of ways.  The simplest is with a username and password.  This is the default setting for free-tier deployments.  There are a number of other built-in authentication solutions used by Solace that are quite extensible; an entire series of blogs could be written on this topic alone.  Concerning HIPAA compliance, Solace integrates easily with LDAP.  By authorizing against LDAP, your Solace access controls have the same HIPAA compliance as your LDAP configuration.  Configuring LDAP to be HIPAA compliant is a well-established and well-documented process; it suffices to say that if your LDAP configuration is HIPAA compliant, your Solace configuration is HIPAA compliant.
In addition to LDAP integration, Solace has some built-in configuration options that can supply fine-grained access control down to the topic level.  Like most messaging systems, Solace has Access-Control Lists.  ACLs in Solace define the topics a user can publish and subscribe to, without the user having to know ahead of time.&lt;br /&gt;
&lt;img src=&quot;https://blog.ippon.tech/content/images/2020/02/Screen-Shot-2020-02-28-at-2.17.09-PM.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://blog.ippon.tech/content/images/2020/02/Screen-Shot-2020-02-28-at-2.17.53-PM.png&quot; alt=&quot;&quot; /&gt;
If the user attempts to pub/sub against a topic not on their ACL, an error will be thrown.  Additionally, Solace ACLs can enforce IP whitelists or blacklists.  This means a user is only allowed to pub/sub messages from a very specific network location.
&lt;img src=&quot;https://blog.ippon.tech/content/images/2020/02/Screen-Shot-2020-02-28-at-2.14.58-PM-1.png&quot; alt=&quot;&quot; /&gt;
Typically, this is a physical location in an office or the end of an encrypted VPN tunnel.  This kind of control is not required by HIPAA, but it is a recommended step to take when trying to become HIPAA compliant.
Another great feature of Solace that provides fine-grained, HIPAA compliant access control are client profiles.  Like the various methods of authentication to Solace, client profiles are an extensive topic in Solace configuration that require an in-depth knowledge of low-latency networking to fully grasp.  Typically, these settings are worth modifying as a workaround for upstream networking issues.  However, it’s worth noting some of the less specific features that could be configured in a HIPAA compliant environment.
&lt;img src=&quot;https://blog.ippon.tech/content/images/2020/02/Screen-Shot-2020-02-28-at-2.23.07-PM.png&quot; alt=&quot;&quot; /&gt;
When configuring a client profile, it is important to remember that clients using this profile will be restricted to the actions and settings in that profile.  There are some client specific settings that can configured, but general usability is restricted at the profile level.  For example, if you never want a client to connect to a queue, you would not allow them to receive guaranteed messages.  If you wanted to specify a service level user that could only create bridged connections (connections between different Solace Message VPNs or Services), you would enable “Connect as a Bridge.”  If you only want to publish messages when there is an active subscriber receiving them, you would enable the “Reject Messages to Sender on No Subscription Match Discard” setting.  These are all standard, high-level settings that define the behavior for a set of clients using your Solace device.  HIPAA compliance comes in with the “Downgrade Connection to Plain Text” setting.  This is a setting you would immediately disable when configuring Solace.  Under no circumstances should you downgrade the encryption on a connection in a HIPAA compliant environment.  By disabling this setting, all users on that client profile will automatically follow this setting.&lt;/p&gt;

&lt;h3 id=&quot;introduce-activity-logs-and-audit-controls&quot;&gt;Introduce Activity Logs and Audit Controls&lt;/h3&gt;
&lt;p&gt;If you want to view logs on a Solace router, simply subscribe to the topic #LOG/&amp;gt;.  This does require a small amount of configuration on the router side (see below), but once enabled, your configured log messages will be routed to the appropriate topic for consumption.&lt;br /&gt;
&lt;img src=&quot;https://blog.ippon.tech/content/images/2020/03/Screen-Shot-2020-03-17-at-12.35.28-PM.png&quot; alt=&quot;&quot; /&gt;
Instead of writing to log files, Solace will track activity by publishing messages to the internal logging topic #LOG.  By setting up a queue or an always-on consumer bound to the #LOG/&amp;gt; topic, you will always have up to date logs for your app.  Furthermore, log messages are broken out by topic hierarchy.  This allows you to have very granular logging configurations across all of your consumers.  In short, Solace’s logging capabilities extends to meet your organization’s HIPAA requirements; you just may have to think outside of the box about acquiring those logs.  You no longer need to setup an FTP site or run a &lt;code class=&quot;highlighter-rouge&quot;&gt;tail -F logs/*&lt;/code&gt;.  If you think about logs as messages, it becomes very easy to acquire logs in a scalable manner to achieve HIPAA compliance.&lt;/p&gt;

&lt;h2 id=&quot;administrative-safeguards&quot;&gt;Administrative Safeguards&lt;/h2&gt;
&lt;h3 id=&quot;developing-a-contingency-plan&quot;&gt;Developing a Contingency Plan&lt;/h3&gt;
&lt;p&gt;Solace PubSub+ appliances come with the pre-configured option of establishing highly available routing, with the option to add a disaster recovery node.  This triplet of appliances ensures always-on performance with no data loss in case of a disaster.&lt;/p&gt;
&lt;h3 id=&quot;restricting-third-party-access&quot;&gt;Restricting Third-Party Access&lt;/h3&gt;
&lt;p&gt;The rules governing third-party access to a PubSub+ service are as straightforward as restricting access to corporate e-mail.  Secure passwords and proper network configuration make PubSub+ services quite secure from third-party access.  This is true for any cloud deployment.  Consider AWS’s VPC construct.  By default, it secures resources access through security groups, route tables and network access control lists.  When deploying a Solace PubSub+ appliance inside a corporate VPC, your PubSub+ appliance is bound to the same access restrictions which protect all of your assets from third-party access.&lt;/p&gt;

&lt;h2 id=&quot;final-thoughts-on-hipaa-compliance-with-solace&quot;&gt;Final Thoughts on HIPAA Compliance with Solace&lt;/h2&gt;
&lt;p&gt;Solace is a HIPAA compliant messaging solution.  Solace appliances have always had this capability, even before the company released a cloud-native deployment of their messaging technology.  By taking the time to properly configure your PubSub+ services, achieving HIPAA compliance is quite straightforward.  Here’s a short-list of recommendations to get your organization started.  From here, use your organization’s specific requirements to ensure PubSub+ services will assist you in all your messaging needs.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Define a logging consumer that writes #LOG/&amp;gt; messages to Splunk, or an Elasticsearch cluster.&lt;/li&gt;
  &lt;li&gt;Deploy your PubSub+ in an AWS VPC within a private subnet.  Allow routing between a primary and secondary appliance, with fail-over traffic going to the DR appliance in a different region.&lt;/li&gt;
  &lt;li&gt;Deploy a PubSub+ image or Virtual Machine into your private cloud and manage it completely independent of Solace and the Cloud Console.  (AWS has an AMI on the Marketplace that allows you to deploy a Solace PubSub+ appliance using the EC2 service for example.)&lt;/li&gt;
  &lt;li&gt;Impart failover best-practices into your environment.  In a triplicate deployment, the requirements are a little tricky.  Check out &lt;a href=&quot;https://docs.solace.com/Configuring-and-Managing/Redundancy.htm&quot;&gt;this document from Solace&lt;/a&gt; that defines best practices for failover in a PubSub+ environment.&lt;/li&gt;
  &lt;li&gt;Establish a white-list of subnets that are permitted to connect to the appliances.  From there, determine which clients belong to which subnets and allocate topics they are permitted to publish and subscribe to using ACLs.&lt;/li&gt;
  &lt;li&gt;Apply a security layer to the Solace APIs that meets your organization’s security standards.  For example, this layer could publish all messages using your organization’s encryption policies.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information on Solace’s PubSub+ service, or if you have a specific question, check out https://solace.community/.  This website is constantly monitored by Solace professionals looking to answer any question you may have.&lt;/p&gt;</content><author><name>Dan Ferguson</name></author><summary type="html">What is Solace? Solace are the makers of the Solace PubSub+ Platform which is used to event enable your enterprise. The core of the platform is the Solace PubSub+ Advanced Event Broker that comes in hardware, software, and messaging as a service in your favorite public cloud.</summary></entry><entry><title type="html">Creating an Event Driven jHipster Application with Solace</title><link href="http://localhost:4000/posts/creating-an-event-driven-jhipster-application-with-solace" rel="alternate" type="text/html" title="Creating an Event Driven jHipster Application with Solace" /><published>2019-12-18T00:00:00-05:00</published><updated>2019-12-18T00:00:00-05:00</updated><id>http://localhost:4000/posts/creating-an-event-driven-jhipster-application-with-solace</id><content type="html" xml:base="http://localhost:4000/posts/creating-an-event-driven-jhipster-application-with-solace">&lt;p&gt;Today, the modern web-application is event driven.  In order to be an event-driven application, you need two things: the event, and message bus or mesh on which to send the event.  Typically Kafka is the first and last platform used by developers to achieve event-driven architectures, primarily because it has always been free and is relatively easy to setup.  However, Kafka, especially Confluent Kafka, is better suited as an event database due to its built in message log and replay capabilities.  But Kafka presents some difficulties in a production environment.&lt;/p&gt;

&lt;p&gt;Maintaining a Kafka infrastructure requires very careful consideration and planning, especially if event ordering matters to your application.  For organizations that cannot afford a messaging operations team to maintain their message bus, either financially or operationally, an event driven architecture can be more of a nightmare than synchronous API calls.  This is where Solace shines.&lt;/p&gt;

&lt;p&gt;Solace is a message bus that got its start in the finance industry.  Originally, the product offering was restricted to hardware accelerated routers that would publish and subscribe small messages very quickly over a networks with varying performance in order.  To achieve this, the engineers at Solace built routers containing specialized NICs with a custom TCP stack built on them designed for extremely low latency messaging.  Because of the specialized nature of these routers, they were very expensive and only saw use in enterprise companies requiring ultra low-latency messaging like hedgefunds and banks.  With the advent of virtualization technologies and the maturation of cloud providers, its easy and inexpensive to deploy Solace routers anywhere in the world!&lt;/p&gt;

&lt;p&gt;Why is this so important?  As development paradigms shift towards event-driven architecture, it is becoming more crucial now more than ever to have reliable, scalable, low-cost, and operationally efficient message backbones to facilitate your applications event footprint.  But just how difficult is it to develop an event-driven application using Solace as a message bus?  Let’s try it out!  In this post, I will show you how to integrate jHipster with Solace to develop an event-driven jHipster web application.&lt;/p&gt;

&lt;h1 id=&quot;provision-a-solace-router&quot;&gt;Provision a Solace Router&lt;/h1&gt;
&lt;p&gt;First, navigate &amp;amp; login to the &lt;a href=&quot;https://console.solace.cloud/&quot;&gt;Solace Cloud Console&lt;/a&gt;.  Follow the prompts to create a “service,” be sure to specify free tier and AWS as the cloud provider.  Other cloud providers are offered, but being that AWS owns the majority of the market share and Ippon is an AWS Advanced Consulting Partner, we’re going to use AWS for this demo.  Select a region which supports the free tier of Solace in the Cloud (hint: US-East N.Virginia works).  Then, give a good name to your service.  Your screen should look like this:&lt;img src=&quot;https://blog.ippon.tech/content/images/2019/12/Screen-Shot-2019-12-12-at-11.21.25-PM.png&quot; alt=&quot;Screen-Shot-2019-12-12-at-11.21.25-PM&quot; /&gt;Click the “Start Service” button and wait until your service is provisioned.&lt;/p&gt;

&lt;p&gt;Once your service is started, you should be redirected to a dashboard with tabs for “Status” and “Manage.” I won’t go into details regarding these tabs as that goes beyond the scope of this post.  Instead, navigate to the “Try Me!” tab.  Here you can see the publisher configuration is on the left side, while the subscriber configuration is on the right.  By clicking “Connect” on both sides, you will connect to the broker twice: once as a publisher and once as a subscriber.  Now you can follow the prompts to publish and subscribe to messages in this window.  Experiment with the topic settings in the “Topic” input box.  Notice how publishing a message on a topic you are not subscribing to will not show the message in the subscriber window.&lt;/p&gt;

&lt;h4 id=&quot;solace-connections-fyi&quot;&gt;Solace Connections FYI&lt;/h4&gt;
&lt;p&gt;Solace connections are just TCP connections.  When you click the “Connect” button in the “Try Me” tab, you are creating a TCP connection using the SMF protocal.  SMF is a proprietary message protocol developed by the engineers at Solace.&lt;/p&gt;

&lt;h4 id=&quot;solace-topics-fyi&quot;&gt;Solace Topics FYI&lt;/h4&gt;
&lt;p&gt;Topics are a well-established concept in messaging, and in the Solace world this is no different.  However, Solace imparts more structure around their topics than exists in other open source messaging solutions like RabbitMQ or Kafka.  In Solace, topics have levels seperated by the “/” character.  This allows you to partition your topics bery precisely along the levels specified.  For publishers, this is important as it allows the publisher to publish a very specific topic.&lt;/p&gt;

&lt;p&gt;This is also very important for subscribers.  Subscribers can subscribe to very specific events, or to a large set of wild-carded events.  For example, if the publisher sends a message on the topic &lt;code class=&quot;highlighter-rouge&quot;&gt;USER/CREATE/&amp;lt;ID&amp;gt;&lt;/code&gt; where the ID field is the ID of the user created, the subscriber can subscribe to messages on the topic &lt;code class=&quot;highlighter-rouge&quot;&gt;USER/CREATE/&amp;gt;&lt;/code&gt;.  This topic represents all “create user” events pertaining to any user.  If we wanted all messages for all users, we could subscribe to &lt;code class=&quot;highlighter-rouge&quot;&gt;USER/*/&amp;gt;&lt;/code&gt;, or more succinctly &lt;code class=&quot;highlighter-rouge&quot;&gt;USER/&amp;gt;&lt;/code&gt;.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt;&lt;/code&gt; character is a wildcard representing all unspecified levels of a topic beyond the specified level.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; character is a wildcard representing any string of characters at that level.&lt;/p&gt;

&lt;h1 id=&quot;build-your-app&quot;&gt;Build your App&lt;/h1&gt;
&lt;p&gt;The Solace Cloud Console may be interesting for a little while, but it’s not hard to see how, by itself, this isn’t very useful.  How can you publish and subscribe programmatically within an application?  In this demo, we’ll start with a basic jHipster project.  The details of your application are irrelevant, but I would recommend starting with a Monolithic style application for the purposes of this demo.  While your jHipster project is being generated, navigate to the “Connect” tab in your Solace Cloud Console.  Select the “Solace Java API” drop-down and copy the appropriate API import statement which will changed if you use Maven or Gradle.&lt;/p&gt;

&lt;p&gt;After your project is generated, open the build.gradle file and paste the API reference into the appropriate location.  At the time of this writing, the current API reference is &lt;code class=&quot;highlighter-rouge&quot;&gt;compile(&quot;com.solacesystems:sol-jcsmp:10.2.0&quot;)&lt;/code&gt;.  If you’re using Maven, drop the XML formatted reference into the appropriate section of your pom.xml file.  Be sure to run the &lt;code class=&quot;highlighter-rouge&quot;&gt;./gradlew&lt;/code&gt; command to download this library into your project.  Once this is done, click “Next” in the Solace Cloud Console.
&lt;img src=&quot;https://blog.ippon.tech/content/images/2019/12/Screen-Shot-2019-12-12-at-11.45.33-PM.png&quot; alt=&quot;Screen-Shot-2019-12-12-at-11.45.33-PM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The full repository is &lt;a href=&quot;https://github.com/dferguson992/solace-jhipster-demo&quot;&gt;here on Github&lt;/a&gt; (see bottom for full URL) for your personal enjoyment.  However, for brevity’s sake, I’ll outline the major code changes below.  Assuming you’ve modified the build.gradle file, create this service file:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ippon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;dferguson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.solacesystems.jcsmp.*&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.transaction.annotation.Transactional&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Service&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Transactional&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SolacePublisherService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JCSMPProperties&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JCSMPProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JCSMPSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SolacePublisherService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JCSMPException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JCSMPProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HOST&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JCSMPProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;USERNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JCSMPProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PASSWORD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JCSMPProperties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VPN_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JCSMPException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JCSMPFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onlyInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isOpen&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isClosed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isClosed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;closeSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;publish_topic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JCSMPException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;XMLMessageProducer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessageProducer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JCSMPStreamingPublishEventHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;responseReceived&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Producer received response for msg: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;handleError&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;messageID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JCSMPException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Producer received error for msg: %s@%s - %s%n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;messageID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Topic&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JCSMPFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onlyInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createTopic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;publish_topic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;TextMessage&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;JCSMPFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onlyInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setText&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;prod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Most of the code here can be found in the &lt;a href=&quot;https://solace.com/samples/solace-samples-java/publish-subscribe/&quot;&gt;publish/subscribe Solace tutorial&lt;/a&gt;.  The SolacePublisherService properties have been redacted for security reasons, but the connection details are auto-generated by the Solace Cloud Console and populated by the connection code snippets.&lt;/p&gt;

&lt;p&gt;This class file creates a Solace publisher service.  We don’t care about a subscriber at this time.  In this simplistic event driven application, we can assume the user is creating events and does not care about events being created at all.  In other words, the user is a publisher, publishing events via the application.  The application does not need a subscriber component at this time.  If it did though, the process for integrating a subscriber in your application would be very similar to integrating a publisher.&lt;/p&gt;

&lt;p&gt;Now that we have the service built and wired into the spring context built by jHipster, we need to tell our application to publish an event.  Open the UserService file and add this snippet to the bottom of the &lt;code class=&quot;highlighter-rouge&quot;&gt;createUser&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;solacePublisherService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;solacePublisherService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WELCOME TO THE PLATFORM&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;USER/CREATE/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDTO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;solacePublisherService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;disconnect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JCSMPException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Could not publish the User Create message!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Modify the constructor of the UserService file accordingly:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SolacePublisherService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solacePublisherService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UserService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PasswordEncoder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passwordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AuthorityRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorityRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CacheManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SolacePublisherService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solacePublisherService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;passwordEncoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passwordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authorityRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorityRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;cacheManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cacheManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;solacePublisherService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;solacePublisherService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;test-it-out&quot;&gt;Test It Out&lt;/h1&gt;
&lt;p&gt;Now that we have our application code modified, let’s build and test our application using the Solace Cloud Console.&lt;/p&gt;

&lt;p&gt;Start by returning to the “Try Me!” tab in the Solace Cloud Console.  Connect to your Solace router as a subscriber and subscribe to the topic &lt;code class=&quot;highlighter-rouge&quot;&gt;USER/CREATE/&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Build the jHipster application as the Readme instructs: run &lt;code class=&quot;highlighter-rouge&quot;&gt;./gradlew&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;npm start&lt;/code&gt;.  Once your jHipster application is built, log into the application as the admin (default username and password is admin/admin).  Then, navigate to the User Administration tab in the top-right corner and select the “User Management” button.  Select the “Create New User” button in the top-right corner, fill in the blanks, and click the button to create the user.&lt;/p&gt;

&lt;p&gt;Once the user is created in your app, return to the Solace Cloud Console’s “Try Me!” tab.  You should see a message pop up in the Solace Cloud Console similar to the following:&lt;img src=&quot;https://blog.ippon.tech/content/images/2019/12/Screen-Shot-2019-12-17-at-9.40.20-PM.png&quot; alt=&quot;Screen-Shot-2019-12-17-at-9.40.20-PM&quot; /&gt;  Congratulations!  You’ve just sent an event over a message bus in response to an application event driven by a user’s behavior!&lt;/p&gt;

&lt;p&gt;This demo is a very simplistic example of developing an event-driven application.  The published message is not very helpful and the application only publishes one type of message.  To truly take advantage of an event-driven architecture, you could for example subscribe to a creation event and send a welcome e-mail to the new user.  Or if your application has an e-commerce component, you could publish and subscribe page views to help your data science team determine which products pique consumer interest.  The applications are virtually unlimited.  The only important aspect of event-driven application design are having atomic, consistent, independent and durable events for application components which are important to your business.&lt;/p&gt;

&lt;h1 id=&quot;external-links&quot;&gt;External Links&lt;/h1&gt;
&lt;p&gt;Github Repo - https://github.com/dferguson992/solace-jhipster-demo&lt;/p&gt;</content><author><name>Dan Ferguson</name></author><summary type="html">Today, the modern web-application is event driven. In order to be an event-driven application, you need two things: the event, and message bus or mesh on which to send the event. Typically Kafka is the first and last platform used by developers to achieve event-driven architectures, primarily because it has always been free and is relatively easy to setup. However, Kafka, especially Confluent Kafka, is better suited as an event database due to its built in message log and replay capabilities. But Kafka presents some difficulties in a production environment.</summary></entry><entry><title type="html">AWS Well-Architected 2020</title><link href="http://localhost:4000/posts/aws-well-architected-2020" rel="alternate" type="text/html" title="AWS Well-Architected 2020" /><published>2019-12-16T00:00:00-05:00</published><updated>2019-12-16T00:00:00-05:00</updated><id>http://localhost:4000/posts/aws-well-architected-2020</id><content type="html" xml:base="http://localhost:4000/posts/aws-well-architected-2020">&lt;p&gt;Ippon USA has been working to lock in Well-Architected status in the North America region for the last six months.  By the end of 2019, Ippon USA will join Ippon France in meeting the &lt;a href=&quot;https://aws.amazon.com/partners/find/partnerdetails/?n=Ippon%20Technologies&amp;amp;id=0010L00001iWx29QAC&amp;amp;t=psf-overview&quot;&gt;Well-Architected program requirements&lt;/a&gt; for two consecutive quarters.  Over the last 6 months, the WAR (Well-Architected Review) team at Ippon has learned through experience.&lt;/p&gt;

&lt;p&gt;This past week, I was lucky enough to attend re:Invent 2019 where I learned other AWS Partners have had similar experiences.  In addition to the new announcements surrounding Well-Architected, there’s a lot to think about for how Ippon will use the program in 2020.&lt;/p&gt;

&lt;h2 id=&quot;well-architected-is-a-mindset&quot;&gt;Well Architected is a Mindset&lt;/h2&gt;
&lt;p&gt;The 5 pillars of Well Architected are often called “AWS Tribal Knowledge.”  But the principles that define these pillars are not proprietary AWS concepts.  The strategies and techniques used to build performant, reliable, and secure applications which are easy to maintain and inexpensive have been well established for decades.  So why is the Well-Architected program so valuable to clients?  Based on what I learned at re:Invent 2019, it seems like Well Architected is not valuable to clients unless they truly practice Well-Architected at every level of their organization.&lt;/p&gt;

&lt;p&gt;The most successful AWS Partners in the Well-Architected (WA) space ensure all of their employees, including sales, are well-versed in the WA Framework.  This company wide adoption allowed one of the speakers at re:Invent to conduct over 200 WA reviews in 2019, with a rate of rollover into additional business.  A similar company touted the same number of reviews, but expressed difficulty in converting reviews into additional business.  This is not to say the architects at Company A are better at reviewing than the architects at Company B.  The big difference between the two organizations is how they treated the 5 pillars of WA internally.  Company A said they dove into WA head-first, while Company B implied they were testing the program out.  This hesitance is evidenced by the niche group of WA focused employees at Company B, compared to the front-to-back adoption of WA at Company A.&lt;/p&gt;

&lt;p&gt;When your entire organization adopts WA principles, these common sense tenants that any seasoned engineer would claim to practice on a daily basis anyway, the organization will retain new business as a consequence.&lt;/p&gt;

&lt;h2 id=&quot;well-architected-is-a-sales-tool&quot;&gt;Well-Architected is a Sales Tool&lt;/h2&gt;
&lt;p&gt;The WA framework is a great addition to a sales pitch for new clients.  Ippon Technologies’s motto is “Discovery to Delivery.”  This usually means initial engagements with a client start with a “discovery” period where we interview engineers and product owners, define deliverables, build a project timeline and crank out as many relevant demos as possible.  After this process, which can be lengthy depending on the proposed scope, we hit the ground on “delivery,” usually in an agile project management style.&lt;/p&gt;

&lt;p&gt;Before re:Invent, we never rolled WA reviews into the “discover” phase of our engagements.  Now, we will start introducing WA reviews as part of the initial assessment.  By conducting a review early on, it becomes clear to all parties exactly what the rest of the assessment needs to focus on.  The scope of the engagement is well-defined within the confines of the review process.  In addition to raising awareness for the technical flaws which need to be remedied during the engagement, the WA review also raises awareness for larger organizational issues that could be addressed during the engagement.&lt;/p&gt;

&lt;p&gt;For example, if our client is looking to add a new feature to their app before they sign contracts for new business in a different region, the Operational Excellence, Performance, and Reliability pillars should be used to assess if the client is ready to scale their business as they have planned.  Armed with this knowledge, Ippon engineers can be ready to scope DR replication, CDS deployments, and even a hiring process for new engineers on behalf of the client.  Just by allocating three or four hours at the beginning of the “discovery” phase to have a focused discussion on WA concepts, we will be able to streamline “discovery” initiatives and deliver a stronger product by the end of the engagement.&lt;/p&gt;

&lt;h2 id=&quot;well-architected-is-not-an-innovation-driver&quot;&gt;Well-Architected is not an Innovation Driver&lt;/h2&gt;
&lt;p&gt;After re:Invent 2019, I am so eager to use all of the shiny new features that can be found on AWS.  Some of this features can be quite expensive though, and can introduce complexity into an otherwise simple problem.  This creates solutions which are not Well-Architected.  My last, and most important, note on WA at Ippon in 2020 is that Well-Architected is not going to be an excuse to introduce new, innovative tools and services for the sake of innovating.&lt;/p&gt;

&lt;p&gt;One of the presenters at the WA event shared story after story of how when they started their journey with the WA program, the temptation to recommend cutting edge tools and services on AWS was too great to resist.  This created technical debt in the recommendations that rolled into an operational cost for their engineering staff.  I am happy to say, the partner quickly remedied this practice internally.  Now, the remediations they suggest include innovative tools and services when and where they are required.&lt;/p&gt;

&lt;p&gt;It may be difficult to assess what could be considered “over-engineering” when conducting a review.  After all, if your job is review and improve architectures, it may not be over-engineering to you to recommend AWS Managed Kafka as a Service to introduce a message bus to decouple applications when simple SQS will work just fine.  With that in mind, the company suggested getting to know technical staff as part of the review.  By having an understanding of how the engineering staff likes to work, whether it’s open source over managed solutions, Windows over Linux, Kubernetes or plain ECS; this information helps to shape recommendations.&lt;/p&gt;

&lt;h2 id=&quot;need-a-workload-reviewed&quot;&gt;Need a workload reviewed?&lt;/h2&gt;
&lt;p&gt;If you like what you read, reach out!  We’d love to conduct a review of one of your workloads.  Check out our &lt;a href=&quot;https://en.ippon.tech/aws-well-architected-reviews/&quot;&gt;Amazon Partner Network page&lt;/a&gt; to begin scheduling a WAR.  Or, reach out to me directly at dferguson@ipponusa.com and I’ll work with you to schedule your first review with our team of highly skilled reviewers.&lt;/p&gt;</content><author><name>Dan Ferguson</name></author><summary type="html">Ippon USA has been working to lock in Well-Architected status in the North America region for the last six months. By the end of 2019, Ippon USA will join Ippon France in meeting the Well-Architected program requirements for two consecutive quarters. Over the last 6 months, the WAR (Well-Architected Review) team at Ippon has learned through experience.</summary></entry><entry><title type="html">Java 13 Release Features</title><link href="http://localhost:4000/posts/java-13-release-features" rel="alternate" type="text/html" title="Java 13 Release Features" /><published>2019-09-18T00:00:00-04:00</published><updated>2019-09-18T00:00:00-04:00</updated><id>http://localhost:4000/posts/java-13-release-features</id><content type="html" xml:base="http://localhost:4000/posts/java-13-release-features">&lt;p&gt;Ever since Oracle took over the long-term advancement of the Java programming language, Java has been upgraded on a semi-annual release schedule.  Tuesday, September 17th marks the official release date of Java 13.  This release is not LTS (Long-Term Support); many of its features lay the groundwork for larger transitions in the languages long-term development, as seen between versions 8 and 12.  Additionally, it is worth mentioning this release falls under the OpenJDK.&lt;/p&gt;

&lt;h1 id=&quot;useful-links&quot;&gt;Useful Links&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://openjdk.java.net/projects/jdk/13/&quot;&gt;JDK 13 JEP Summary&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://jdk.java.net/13/&quot;&gt;JDK 13 Download Link&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/en/java/javase/13/docs/api/index.html&quot;&gt;JDK 13 API Document&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.ippon.tech/comparing-java-lts-releases/&quot;&gt;Comparing Java LTS Releases&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;feature-summary&quot;&gt;Feature Summary&lt;/h1&gt;
&lt;p&gt;Let’s take a closer look at some of the features added to Java 13.  These features are broken out by JEP number (JDK Enhancement Proposals).  The JEP indexing system is similar to the more established &lt;a href=&quot;https://www.rfc-editor.org/rfc-index.html&quot;&gt;RFC protocal&lt;/a&gt; used industry-wide to define well-established definitions like TCP (&lt;a href=&quot;https://en.wikipedia.org/wiki/April_Fools%27_Day_Request_for_Comments&quot;&gt;as well as some less known memos&lt;/a&gt;).  The JEP index defines the roadmap for future Java releases, though it is worth mentioning not every JEP makes it into a release (&lt;a href=&quot;https://openjdk.java.net/jeps/352&quot;&gt;JEP 352&lt;/a&gt;, postponed to Java 14).&lt;/p&gt;

&lt;p&gt;We’ll start this article with some of the sexier additions to Java in this release, and finish up with features more interesting to the die-hard Java developers out there.&lt;/p&gt;
&lt;h2 id=&quot;jep-354---switch-expressions-preview&quot;&gt;JEP 354 - Switch Expressions (Preview)&lt;/h2&gt;
&lt;p&gt;JEP 354 is my personal favorite because it is another leap forward in the quest to make Java more functional, and less procedural.  Traditionally, &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; statements perform a sequence of operations based on the value held by the variable you are “switching” on.  Using the &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; keyword, developers can execute statements that are dependant on the value of the so-called “switch”.&lt;/p&gt;

&lt;p&gt;This paradigm has always possessed a few crucial flaws.  The first being the required &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; statement at the end of each case.
Without the &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; statement, a logical switch becomes a sequence of statements.  For example,&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;I'm a foo.&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;I'm a bar.&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;will not print out “I’m a foo.”  Instead, it prints out “I’m a bar.” because there was no &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; statement halting the execution from going forward.  For large &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; blocks, the extra and unnecessary &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; statements can quickly bloat your code.&lt;/p&gt;

&lt;p&gt;The other crucial flaw with traditional &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; statements is scope is shared across every &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; statement in the block.  This means any variable declared in one &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; block exists in another &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; block.&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;In this example, the first &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; block is executed.  The variable &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; is initialized, and it is used to assign a value to a boolean outside the switch’s scope.  Then, the second &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; block is executed.  Technically, an error would be thrown because we are trying to create a variable &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; when one already exists.  But if the error was not thrown, the application would print “true” because the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;result&lt;/code&gt; is passed down from the first &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; statement.  To get around this, you would have to create a variable &lt;code class=&quot;highlighter-rouge&quot;&gt;result2&lt;/code&gt;.  This creates additional unnecessary lines of code and those extra, hardly used variables create more overhead for the garbage collector.&lt;/p&gt;

&lt;p&gt;In Java 13, the new &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; statement does away with the &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; statement, and it creates an individual scope for each &lt;code class=&quot;highlighter-rouge&quot;&gt;case&lt;/code&gt; clause.  It also introduces the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; keyword, which is a great way to return values from &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; clauses.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; keyword also allows &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt; blocks to be used declaratively as statements.  Take the above example, if we were to rewrite it in Java 13, we would have the following:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foobar&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The output of this snippet is “true,” thanks to the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; keyword.  Without using any &lt;code class=&quot;highlighter-rouge&quot;&gt;break&lt;/code&gt; statements and without creating additional variables, we’ve assigned a conditional value to another variable using syntax similar to a lambda or anonymous class, without actually creating a lambda or anonymous class.  This new design of the switch statement makes it a valuable tool for making readable code which is easy to extend and modify.&lt;/p&gt;

&lt;p&gt;Some long-time Java developers may be hesitant to use a new keyword like &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt;, and for good reason.  The &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; keyword is a hair’s width away from the &lt;code class=&quot;highlighter-rouge&quot;&gt;return&lt;/code&gt; keyword in terms of functionality.  They perform very similar tasks, the main difference is when you would use them.  To truly elucidate the reason for the &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; keyword, let’s rearrange the above example slightly:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;semaphore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;switch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;foo&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;bar&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;yield&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;default&lt;/code&gt; case in the above example shows the situation where there are multiple steps to complete in this case.  To accommodate the passing of a value from the individual cases context back to the super-context of the &lt;code class=&quot;highlighter-rouge&quot;&gt;switch&lt;/code&gt;, we must &lt;code class=&quot;highlighter-rouge&quot;&gt;yield&lt;/code&gt; that value.  In the cases of &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;foo&quot;&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&quot;bar&quot;&lt;/code&gt; this step is unnecessary, as there is only one possible value to be yielded up to the super-context.&lt;/p&gt;
&lt;h2 id=&quot;jep-355---text-blocks-preview&quot;&gt;JEP 355 - Text Blocks (Preview)&lt;/h2&gt;
&lt;p&gt;This feature of Java 13 is more cosmetic than any other feature in this release.  Effectively, it replaces line-breaks in Java via the &lt;code class=&quot;highlighter-rouge&quot;&gt;+&lt;/code&gt; sign with simple carriage returns.  To utilize text blocks, you must initialize a string with three quotation mark symbols.  This makes text blocks like&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This is a former example\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot; of multi-line text in\n&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;&quot; pre-Java 13 times.&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;capable of being re-written like this:&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;
                This is a modern text block.
                There is no need for the newline character at all.
                We just add a new line and it is processed automatically.
                No more crazy escape sequences!
&quot;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This syntax is great for writing application code in other languages like Scala and passing it to an interpreter object within your application.  Another great use case is embedding formatted HTML in your Java application.  The rules for text blocks are just like string literals.  You can concatenate text blocks with String literals, you can insert variables into String literals, you can even insert the single quote “ into text blocks without having to escape it; even escape sequences are supported if you wish to add them in!&lt;/p&gt;
&lt;h2 id=&quot;jep-353---reimplement-the-legacy-socket-api&quot;&gt;JEP 353 - Reimplement the Legacy Socket API&lt;/h2&gt;
&lt;p&gt;JEP 353 covers the new implementation of the Socket API.  To be more precise, an additional, more modern implementation of the Socket API (which was introduced in Java 1), has been added to the core libraries.  The old Socket API is available via a JDK system property and the &lt;code class=&quot;highlighter-rouge&quot;&gt;PlainSocketImpl&lt;/code&gt; class (but not for long).&lt;/p&gt;

&lt;p&gt;The first, and in my opinion most important feature of the new implementation, is that sockets are polled in non-blocking mode and are accessed via an operation limited by a timeout by default.  Why is this important?  Effectively, it means you can perform operations on a Socket object without having to wait for the Socket to respond before making an additional operation on said Socket.  Consider an application that relies on external APIs for a subset of its functionality.  If you start the application with a blocking Socket, you will have to wait for your Socket operations to complete before continuing your application.  But if you were to initiate a connection to an API service using a non-blocking socket and store the result in a Future&amp;lt;&amp;gt; object, you can continue your application’s initialization steps without waiting for a response.  This is particularly convenient when decoupling your application’s initialization and third-party dependencies.&lt;/p&gt;
&lt;h2 id=&quot;jep-350---dynamic-cds-archives&quot;&gt;JEP 350 - Dynamic CDS Archives&lt;/h2&gt;
&lt;p&gt;This particular enhancement modifies the JRE more than anything; most Java developers will not notice this enhancement in their day to day development.  The origins of this JEP start in Java 10, with &lt;a href=&quot;https://openjdk.java.net/jeps/310&quot;&gt;JEP 310&lt;/a&gt;.  Class-Data Sharing has been around since JDK 5, but it was codified as “Application Class-Data Sharing” for Java 10.  Effectively what happens is meta-data across a developer-specified list of classes are shared in an archive file.  This archive file is then loaded and referenced by the JVM.  If this archive file is built from 100 class files, you save the JVM a lot of time and energy by referencing just the one file.  This reduces memory footprint and application load times.&lt;/p&gt;

&lt;p&gt;So what feature has been added to CDS in Java 13?  Java 13 introduces dynamic archiving.  Before Java 13, making a CDS archive required the completion of several steps.  As outlined in JEP 350, the steps are:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Do one or more trial runs to create a class list&lt;/li&gt;
  &lt;li&gt;Dump an archive using the created class list&lt;/li&gt;
  &lt;li&gt;Run with the archive
These steps are all achievable via java CLI options.  Depending on the size of the application, these commands may be difficult to run.  This is where Dynamic CDS comes in.  This enhancement performs step 1 at the end of your application’s execution, let’s say in your QA build process.  From here its just a matter of building your archive file and dropping it into a CI/CD pipeline for deployment.  The manual steps required to build the class list required to create the archive is completely gone with Dynamic CDS Archives.
    &lt;h2 id=&quot;jep-351---zgc-uncommit-unused-memory&quot;&gt;JEP 351 - ZGC: Uncommit Unused Memory&lt;/h2&gt;
    &lt;p&gt;ZGC was a new garbage collector introduced to Java in Java 11.  It was designed to work on environments with massive compute capacity and memory requirements, significantly greater than desktop computing.  While other garbage collectors have their perks, ZGC is the best choice for applications with significant memory and compute requirements.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ZGC is not without limits though.  Before Java 13, ZGC never returned memory to the OS without a restart.  This feature is common to most garbage collectors; most traditional GCs return memory to the OS by default as they were designed to run on commodity or even embedded hardware with severely restricted memory and compute requirements.  Not being able to return memory to the OS would have significant repercussions on application performance.  If we consider the origins of ZGC though, it is easy to see why this feature was not built-in.  If you have thousands of gigabytes of RAM installed on your host machine, you likely do not need to return it to the OS.  Regardless, this feature was added to ZGC in Java 13, making it an option for applications that do not always run on specialized, enterprise-level machines.&lt;/p&gt;
&lt;h1 id=&quot;future-directions&quot;&gt;Future Directions&lt;/h1&gt;
&lt;p&gt;Java 13 is the next chapter in the quest to make Java a viable functional language.  Since Oracle has taken over the development of Java, it has gradually evolved into a modern language, capable of keeping up with the hottest trends in application development.  Since Java 8, the language has steadily evolved into a discrete, easily readable, easily extensible language capable of keeping up with other languages like Python, Scala, and Kotlin.&lt;/p&gt;

&lt;p&gt;At the time of this post’s writing, Java 14 is scheduled to be released in March of 2020.  &lt;a href=&quot;https://openjdk.java.net/jeps/352&quot;&gt;JEP 352&lt;/a&gt; is the only addition scheduled for &lt;a href=&quot;https://openjdk.java.net/projects/jdk/14/&quot;&gt;Java 14&lt;/a&gt;, but that last will likely grow to include several more JEPs from the index before the end of 2019.&lt;/p&gt;</content><author><name>Dan Ferguson</name></author><summary type="html">Ever since Oracle took over the long-term advancement of the Java programming language, Java has been upgraded on a semi-annual release schedule. Tuesday, September 17th marks the official release date of Java 13. This release is not LTS (Long-Term Support); many of its features lay the groundwork for larger transitions in the languages long-term development, as seen between versions 8 and 12. Additionally, it is worth mentioning this release falls under the OpenJDK.</summary></entry><entry><title type="html">Ippon’s RVA WAR Tour</title><link href="http://localhost:4000/posts/ippons-rva-war-tour" rel="alternate" type="text/html" title="Ippon's RVA WAR Tour" /><published>2019-07-16T00:00:00-04:00</published><updated>2019-07-16T00:00:00-04:00</updated><id>http://localhost:4000/posts/ippons-rva-war-tour</id><content type="html" xml:base="http://localhost:4000/posts/ippons-rva-war-tour">&lt;p&gt;Ippon Technologies recently trained their two North America based Solutions Architects to conduct Well-Architected Reviews.  I am one of those architects, and I recently finished a week of conducting reviews on some of our best clients that are using AWS in some capacity.  This blog post is an account of that week and the lessons I learned.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-well-architected-review&quot;&gt;What is a Well-Architected Review?&lt;/h2&gt;
&lt;p&gt;The Well-Architected Framework is a compilation of what AWS calls “tribal knowledge” which is focused on designing “well-architected” applications.  An application which is well-architected is, according to this framework, likely to perform very well under most circumstances as there have not been any identified risks within the applications architecture at that time.  If an application is well-architected, it adheres strongly to the principles and concepts outlined in the 5 pillars of the well-architected framework.
&lt;img src=&quot;https://volansys.com/wp-content/uploads/2019/03/VOLANSYS-Pillars-of-AWS-Well-Architected-new.png&quot; alt=&quot;&quot; /&gt;
As you dig into the 5 Pillars, it becomes obvious how straightforward the well-architected status is.  The concepts covered in the well-architected review are common sense principles that identify resilient, efficient, and cost effective applications.&lt;/p&gt;

&lt;h2 id=&quot;why-would-a-client-be-interested&quot;&gt;Why Would a Client Be Interested?&lt;/h2&gt;
&lt;p&gt;AWS has built a very competitive sales program around the Well-Architected Framework.  This framework creates an engine for AWS Certified Solutions Architects to look at cloud workflows and aid in the process of identifying potential risks in the deployed workload.  These workloads could be on paper as a diagram, or they could have been deployed in a cloud environment for 10 years now; the exact deployment state does not matter.  The point of a Well-Architected Review (WAR) is to fix problems in workloads before they cost your business.&lt;/p&gt;

&lt;p&gt;The reason partner organizations, like Ippon, conduct these reviews is because we are a company which specializes in cloud technology.  Our consultants are certified AWS Solutions Architects, Developers, and DevOps Engineers; it is our job to stay current in the rapidly evolving cloud services space.  It is certainly possible to review your workload without our services, but unless your organization employs dedicated AWS Solutions Architects you will not have the benefit of an outside opinion with cloud deployment expertise on your workload.&lt;/p&gt;

&lt;p&gt;Additionally, by conducting a WAR on a mission-critical cloud workload, your AWS Account becomes eligible for a $5,000 service credit towards any remediation work which is flagged up by a first time review.  This incentive allows your company to pay for any critical remediation items which may have been identified by the WAR.&lt;/p&gt;

&lt;h2 id=&quot;key-take-aways-from-a-week-of-reviews&quot;&gt;Key Take-Aways from a Week of Reviews&lt;/h2&gt;
&lt;p&gt;I work in the New York Ippon office, but all of the reviews I conducted this week were based out of our Richmond delivery center.  I had the opportunity to meet face to face with clients whose workloads I had never been exposed to before.  As a result, I had been exposed to a vast range of workloads, configurations, and architectures in a very short period of time.  These are some of the key take-aways I recommend other Solutions Architects keep in mind when conducting their own reviews.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Cloud makes your architecture cleaner, no matter the size.&lt;/li&gt;
  &lt;li&gt;Early adopters will always have an uphill battle.&lt;/li&gt;
  &lt;li&gt;Cutting cost is one of the easiest remediation items to implement.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;cloud-is-clean&quot;&gt;Cloud is Clean&lt;/h2&gt;
&lt;p&gt;I had the opportunity this past week to conduct a WAR for a small AWS client.  The organization had about 30 - 40 people employed, and they provided a service isolated primarily to the eastern seaboard, though they are growing fast.  I was not surprised to see their workload on AWS was simple, efficient, and effective.  The workload was scalable and very easy to troubleshoot.  It was designed very well and frankly it fit the bill for what I expected of a smaller sized company.  A few days later, I visited one of our global clients.  On the way to the review, I had expected to wade through layers and layers of architectural diagrams, finding arrows pointing to decommissioned services, and all other manner of architectural nuance characterized by large organizations with a global presence.  I was pleasently surprised to find I was incorrect here.  The large, multi-million dollar global corporation had a very clean, efficient workload in AWS which was easy to understand, troubleshoot and review.  So where was the problem?  Why did I feel like something wasn’t adding up?&lt;/p&gt;

&lt;p&gt;It turns out, the problem was between my ears.  I had a pre-conceived notion about what factors create architectural complexity.  In one of my past lives, I used to work for a large bank as a Site-Reliability Engineer for several data centers.  I vividly remember looking at application flows and network diagrams, trying desperately to solve a production issue only to discover the architecture did not reflect the documentation.  I attributed this to the size of the company I was working with at the time.  This company was a global organization with thousands of servers in a single data center; dozens of data centers around the world.  There was so much to manage in the data center, it became impossible to keep our architecture risk free at all times, let alone keep the documentation up to date.  So if size didn’t determine architectural complexity, what did?&lt;/p&gt;

&lt;p&gt;The big factor which influences architectural complexity is the location of your architecture.  If your compute and storage are located in a data center, there is too much to manage from an operations standpoint to hope to keep your architecture clean and concise.  However, once you move to the cloud, it becomes very easy to seperate your applications logically.  This separation drastically reduces operations expenses and creates a clean environment for you application stack.  A clean environment is easier to troubleshoot, support, and scale.&lt;/p&gt;

&lt;h2 id=&quot;uphill-battle&quot;&gt;Uphill Battle&lt;/h2&gt;
&lt;p&gt;If you’ve been called “Cloud Evangelist” at your organization, it’s very likely there is a negative sentiment to cloud-based hosting.  As the “Cloud Evangelist,” you are one of a few employees that believes the cloud is the answer to your organization’s infrastructure problem.  Every new operations issue which arises confirms your belief in a cloud hosted future.  Every time you pay your data center fees, you grow more and more bitter that this very preventable expense is still an expense for your company.  Cloud Evanglists are usually the first people to promote a cloud migration in their company, and they usually experience the most resistance.&lt;/p&gt;

&lt;p&gt;In my experience this week, it became very obvious to me that many clients simply are not ready to adopt the cloud.  There are many reasons for this, I can only speculate specifics on a client-by-client basis; but I can surmise a few root causes.&lt;/p&gt;

&lt;p&gt;The first is fear of the unknown.  Organizations that view IT as a cost-center do not see the potential for IT to improve their business.  In those situations, you often have management and executive level employees that would rather maintain the status quo in the technology department.  This stability frees them to focus on their business.  The irony is, by ignoring IT and the incessant ramblings of the Cloud Evangelist, the executive is losing out on the chance to improve their IT department.&lt;/p&gt;

&lt;p&gt;The second is fear of lost ROI.  By adopting a cloud provider, you are admitting on some level that your data center costs are too high.  The cost of buying servers, buying network equipment, paying for rack space, and paying for the operational overhead is so astronimcally high, you would think most people would jump at the chance to cut costs.  But when you are a business that prides itself on lasting business partnerships, it may be difficult to justify terminating a contract for something you may not be convinced is worthwhile, especially if you have been paying millions of dollars a year to maintain those business partnerships.&lt;/p&gt;

&lt;p&gt;This past week made it obvious to me that companies always have a reason to not adopt a cloud based data center solution.  That is why the early adopter has the hardest time in their organization.  It takes a big rudder to stear a big ship.  A small rudder can stear a big ship too, but it will take a lot more time.&lt;/p&gt;

&lt;h2 id=&quot;how-many-pennies-on-the-dollar&quot;&gt;How Many Pennies on the Dollar?&lt;/h2&gt;
&lt;p&gt;There is no question, cloud services are cheaper than on-premises data centers.  The cost is literally pennies on the dollar for many services.  This feature of the cloud is what drives adoption.  Going into the reviews this week, I expected to see bills on par with mortgage payments.  Some clients even got their bills so low, they resembled credit card payments!  However, no matter how impressive the monthly AWS bill was, every client had the same question.  “How much am I paying within my organization, and I can I bring that cost down?”&lt;/p&gt;

&lt;p&gt;As your organization grows to use AWS services, your monthly bill can quickly become obfuscated by curious engineers spinning up and spinning down resources.  Some engineers probably even forget to spin down those resources at the end of the day, thus increasing the bill.  AWS offers powerful accelerated deployment services via push-to-deploy mechanisms which exist across many of their services.  The unfortunate drawback to this is your bill can grow faster than you realize without a clear reason why.&lt;/p&gt;

&lt;p&gt;The solution to this problem is simple, but it requires a dilligent architect to see it through.  By tagging your resources, you can generate reports in the Cost and &amp;amp; Usage Explorer which are filtered by tags.  This allows you to discover the costs associated with all of your QA resource for example.  If you have resources which contribute to your monthly charge tagged “QA,” you can easily develop a report which shows all of these resources and how much they cost you that month.  From there, it’s very easy to isolate (and therefore shame) the developer that leaves all of their EC2 instances on over the weekend!  Check out this link on &lt;a href=&quot;https://aws.amazon.com/answers/account-management/aws-tagging-strategies/&quot;&gt;AWS recommended tagging strategies&lt;/a&gt;.  A good tagging strategy will empower you to make more cost effective decisions regarding resource allocation.&lt;/p&gt;

&lt;h2 id=&quot;going-forward&quot;&gt;Going Forward&lt;/h2&gt;
&lt;p&gt;The reviews Ippon conducted this week taught me a lot about the Well-Architected Framework.  I’m very excited to take these lessons learned into future client reviews; we want to offer the best advice possible to all of our clients.  It is my belief these takeaways will help us, and any other Solutions Architect, to conduct helpful reviews which improve cloud workloads for all of our clients.&lt;/p&gt;</content><author><name>Dan Ferguson</name></author><summary type="html">Ippon Technologies recently trained their two North America based Solutions Architects to conduct Well-Architected Reviews. I am one of those architects, and I recently finished a week of conducting reviews on some of our best clients that are using AWS in some capacity. This blog post is an account of that week and the lessons I learned.</summary></entry><entry><title type="html">Best Practices for Amazon EMR</title><link href="http://localhost:4000/posts/aws-white-paper-in-5-minutes-or-less-best-practices-for-emr" rel="alternate" type="text/html" title="Best Practices for Amazon EMR" /><published>2019-05-10T00:00:00-04:00</published><updated>2019-05-10T00:00:00-04:00</updated><id>http://localhost:4000/posts/aws-white-paper-in-5-minutes-or-less-best-practices-for-emr</id><content type="html" xml:base="http://localhost:4000/posts/aws-white-paper-in-5-minutes-or-less-best-practices-for-emr">&lt;p&gt;This blog post summarizes the main points in the AWS white paper titled “Best Practices for Amazon EMR” written by Parviz Deyhim in August 2013.  The paper can be found &lt;a href=&quot;https://d0.awsstatic.com/whitepapers/aws-amazon-emr-best-practices.pdf&quot;&gt;here&lt;/a&gt; and I encourage anyone working with EMR in the long-term to read it, as it is full of easy to understand concepts which will improve your use of EMR.  Some of the technical details are a little dated though, so anything very detailed should be double checked.  Those details are beyond the scope of this post; readers of this post should be looking to refresh their memories at a high level the best strategies for using EMR.&lt;/p&gt;

&lt;h1 id=&quot;main-takeaways&quot;&gt;Main Takeaways&lt;/h1&gt;
&lt;ol&gt;
  &lt;li&gt;S3 is the recommended option over HDFS much of the time&lt;/li&gt;
  &lt;li&gt;Use Transient Clusters for your workloads to save on cost&lt;/li&gt;
  &lt;li&gt;Amazon EMR team has spent a lot of time tuning default settings, so don’t tweak default settings unless you really know what you’re doing and why you need to do it.
    &lt;h1 id=&quot;moving-data-into-emrs&quot;&gt;Moving Data Into EMRS&lt;/h1&gt;
    &lt;h4 id=&quot;emrs-is-best-populated-from-s3&quot;&gt;EMRS is best populated from S3&lt;/h4&gt;
    &lt;p&gt;When populated EMRS from an existing cluster for the first time, it is best to use S3 as an escrow data storage location for your on-prem HDFS/non-HDFS data.&lt;img src=&quot;https://blog.ippon.tech/content/images/2019/05/Screen-Shot-2019-05-10-at-9.55.26-AM.png&quot; alt=&quot;Screen-Shot-2019-05-10-at-9.55.26-AM&quot; /&gt;&lt;/p&gt;
    &lt;h4 id=&quot;use-s3distcp-to-copy-data-to-s3&quot;&gt;Use S3DistCp to copy data to S3&lt;/h4&gt;
    &lt;p&gt;S3DistCp is the same as the Hadoop binary DistCp, except it takes advantage of multi-part upload to S3 for larger files.  Hadoop is optimized for large file blocks, so it is usually best to use S3DistCp for copying HDFS files from an external data center or local disk to S3 to take advantage of this optimization.&lt;/p&gt;
    &lt;h4 id=&quot;s3distcp-is-faster-than-distcp&quot;&gt;S3DistCp is faster than DistCp&lt;/h4&gt;
    &lt;p&gt;The exception to this may come in very specific instances, where you need to specify the number of mappers needed for your copy job.  DistCp allows you to specify the number of mappers using CLI flags, whereas S3DistCp does not.  It is possible DistCp could perform faster in some cases when the proper number of mappers need to be specified manually.  However, the default formula used by DistCp is usually the best option for most workloads, which means S3DistCp is your best bet for copying data.
&lt;img src=&quot;https://blog.ippon.tech/content/images/2019/05/Screen-Shot-2019-05-10-at-9.51.20-AM.png&quot; alt=&quot;Screen-Shot-2019-05-10-at-9.51.20-AM&quot; /&gt;&lt;/p&gt;
    &lt;h4 id=&quot;aws-importexport-or-storage-volume-gateway-to-copy-non-hdfs-data-into-s3&quot;&gt;AWS Import/Export or Storage Volume Gateway to copy non-HDFS data into S3&lt;/h4&gt;
    &lt;p&gt;Recommended AWS supported option for transferring data from a non-HDFS source to S3 at the time of publication.  At the time of this post’s writing, you could likely replace Import/Export with a Storage Gateway Volume which writes directly to S3.&lt;/p&gt;
    &lt;h4 id=&quot;copy-from-s3-to-emr&quot;&gt;Copy from S3 to EMR&lt;/h4&gt;
    &lt;p&gt;Use the S3DistCp command to copy the data from your S3 bucket onto a Core Node.  Run the command on a core node, specifying the HDFS directory as the destination.  Let EMR handle the redundant copies to the other core nodes in the cluster.  You cannot run this on a Task or Master node as those nodes do not have HDFS on them.&lt;/p&gt;
    &lt;h4 id=&quot;emrfs--hdfs&quot;&gt;EMRFS &amp;gt; HDFS&lt;/h4&gt;
    &lt;p&gt;Use EMRFS over HDFS to take advantage of S3 as a storage layer.  This works well when continuously adding data to your EMR cluster.  It is better to forward logs to S3 than directly to HDFS.  But when your cluster uses EMRFS, it gets the updates to the file system from S3.  This allows you to take advantage of bucket policies, bucket encryption, and object versioning for your EMR files.&lt;/p&gt;
    &lt;h5 id=&quot;consistent-view&quot;&gt;Consistent View&lt;/h5&gt;
    &lt;p&gt;For more information on how S3 bypasses eventual consistency for new PUT requests, check out &lt;a href=&quot;https://docs.aws.amazon.com/emr/latest/ManagementGuide/emr-plan-consistent-view.html&quot;&gt;Consistent View&lt;/a&gt;, a special feature of EMR which utilizes DynamoDB to bypass the eveentual consistency model employed by S3.&lt;/p&gt;
    &lt;h4 id=&quot;iterative-jobs-should-use-hdfs-only&quot;&gt;Iterative Jobs Should Use HDFS Only&lt;/h4&gt;
    &lt;p&gt;Do not use S3 and EMRFS for iterative jobs, as you will introduce additional costs and latency for all of the repeated S3 GETs.&lt;/p&gt;
    &lt;h1 id=&quot;aggregating-data-for-mapreduce&quot;&gt;Aggregating Data for MapReduce&lt;/h1&gt;
    &lt;h4 id=&quot;fewer-large-files--many-small-files&quot;&gt;Fewer Large Files &amp;gt; Many Small Files&lt;/h4&gt;
    &lt;p&gt;This scheme takes advantage of multi-part uploads to S3, and reduces the number of connections required to upload data.  Additionally, fewer files stored in S3 improves performance for EMR reads on S3.&lt;/p&gt;
    &lt;h4 id=&quot;log-forwarding&quot;&gt;Log Forwarding&lt;/h4&gt;
    &lt;p&gt;Where possible use a log forwarding framework like Apache Flume or Fluentd and write directly to the S3 bucket.&lt;/p&gt;
    &lt;h4 id=&quot;aggregate-logs-based-on-size&quot;&gt;Aggregate Logs Based on Size&lt;/h4&gt;
    &lt;p&gt;If your log aggregator can aggregate logs based on size, try to split your log files into large 1GB or 2GB chuncks.  This will be most performant for EMR.  If you cannot aggregate on size, aggregate on time taking into consideration log volume over time.&lt;/p&gt;
    &lt;h5 id=&quot;recall-the-map-in-mapreduce&quot;&gt;Recall the “Map” in MapReduce&lt;/h5&gt;
    &lt;p&gt;This stage breaks large files into chunks for parallel processing.  That is why it is best to upload large files to HDFS or S3 for EMRFS.&lt;br /&gt;
&lt;img src=&quot;https://blog.ippon.tech/content/images/2019/05/Screen-Shot-2019-05-10-at-9.51.40-AM.png&quot; alt=&quot;Screen-Shot-2019-05-10-at-9.51.40-AM&quot; /&gt;&lt;/p&gt;
    &lt;h4 id=&quot;compress-your-files-before-processing&quot;&gt;Compress Your Files Before Processing&lt;/h4&gt;
    &lt;p&gt;This will save on data transfer costs.  Recall though, EMR splits up files phase.  Make sure you consider your compression algorithm with your log aggregator.  Some compression schemes like GZip and Snappy will not allow the resulting compressed file to be split.  In that case, try not to surpass 1GB per compressed file.  If you do choose a “splitable” compression algorithm like LZO or BZip2, you can drastically increase the size of your compressed files up to 4GB.  Choose intelligently based on required compression speeds and ratios.  These factors are more important than choosing an aggregated file size.  &lt;strong&gt;You will hit a bottleneck in compression speed and ratios before you take a performance hit on S3 for logging more files.&lt;/strong&gt;
&lt;img src=&quot;https://blog.ippon.tech/content/images/2019/05/Screen-Shot-2019-05-10-at-9.51.58-AM.png&quot; alt=&quot;Screen-Shot-2019-05-10-at-9.51.58-AM&quot; /&gt;&lt;/p&gt;
    &lt;h4 id=&quot;consider-compressing-mapper-outputs&quot;&gt;Consider compressing Mapper Outputs&lt;/h4&gt;
    &lt;p&gt;EMR allows you to compress the output of the “Map” function, during the “Reduce” function.  This is something to consider to save on data transfer costs.  You can enable this in the core node properties.&lt;/p&gt;
    &lt;h4 id=&quot;consider-compressing-mapper-outputs-in-memory&quot;&gt;Consider compressing Mapper Outputs in Memory&lt;/h4&gt;
    &lt;p&gt;EMR allows you to compress the memory footprint of the “Map” function as well.  This is an important consideration for large jobs that need to be completed quickly.  If there is a large amount of data to map, compressing the output of the mappers in memory will prevent the output from being written to disk.  You can enable this in the core node properties.
&lt;img src=&quot;https://blog.ippon.tech/content/images/2019/05/Screen-Shot-2019-05-10-at-9.52.11-AM.png&quot; alt=&quot;Screen-Shot-2019-05-10-at-9.52.11-AM&quot; /&gt;&lt;/p&gt;
    &lt;h1 id=&quot;tuning-emr&quot;&gt;Tuning EMR&lt;/h1&gt;
    &lt;h4 id=&quot;instance-size&quot;&gt;Instance Size&lt;/h4&gt;
    &lt;p&gt;Use M2 instances for jobs requiring lots of memory.  C1 or C2 instances provide larger compute resources.  Consider spinning up clusters repeatedly until you discover the most performant instances for your workload.  Keep in mind, larger memory pools prevent disk writes while larger CPU pools process jobs faster.&lt;/p&gt;
    &lt;h4 id=&quot;mapper-process-count&quot;&gt;Mapper Process Count&lt;/h4&gt;
    &lt;p&gt;The best way to calculate this is to rely on the EMR defaults.  If you run a job on a default EMR cluster, you can see in the logs the number of mappers launched to process the job.  Divide this value with the number of Core and Task nodes you have.  The result is the number of mappers per EC2 instance.  From there, you can determine how many mappers per EC2 you will need, and can then make a decision on the instance sizes you will create in your cluster.
&lt;img src=&quot;https://blog.ippon.tech/content/images/2019/05/Screen-Shot-2019-05-10-at-9.52.24-AM.png&quot; alt=&quot;Screen-Shot-2019-05-10-at-9.52.24-AM&quot; /&gt;&lt;/p&gt;
    &lt;h4 id=&quot;transient-clusters&quot;&gt;Transient Clusters&lt;/h4&gt;
    &lt;p&gt;If the number of processesing hours on your cluster is less than a day, spin up a transient cluster.  The cluster will be terminated after the job is done, and you will save on costs.  Additionally, consider transient clusters when using EMRFS, as the data will be backed up in S3.  When the cluster dies, all cluster data will be backed up to S3, allowing you to resume processing at a later date from where you left off.  Generally, if you’re using S3 for storage, you will benefit from a transient cluster.&lt;/p&gt;
    &lt;h1 id=&quot;cost-optimization&quot;&gt;Cost Optimization&lt;/h1&gt;
    &lt;h4 id=&quot;use-spot-instances-for-task-nodes&quot;&gt;Use Spot Instances for Task Nodes&lt;/h4&gt;
    &lt;p&gt;Task nodes offer additional compute, nothing else.  Consider Spot instances for Task nodes to take advantage of EC2 market pricing without introducing potential data loss on your cluster should the Spot instance price rise above what you are willing to pay.&lt;/p&gt;
    &lt;h4 id=&quot;purchase-a-reserved-instance-for-heavy-utilized-nodes&quot;&gt;Purchase a Reserved Instance for Heavy Utilized Nodes&lt;/h4&gt;
    &lt;p&gt;The master node and the minimum number of Core nodes should be reserved instances.  This guarantees you will always have a node available to orchestrate your cluster as the master node.  Additionally, reserved instances for the Core nodes ensures your cluster can always perform at a minimum high efficiency.&lt;/p&gt;
    &lt;h5 id=&quot;using-reserved-instances-requires-deep-workload-knowledge&quot;&gt;Using Reserved Instances requires deep workload knowledge&lt;/h5&gt;
    &lt;p&gt;Only purchase Reserved Instances after you know what your cluster’s workload will look like.  Only purchase reserved instances to cover the predictable, steady-state workload of the cluster.  Spot or on-demand instances should act as a buffer for workloads exceeding expectations.
&lt;img src=&quot;https://blog.ippon.tech/content/images/2019/05/Screen-Shot-2019-05-10-at-9.52.49-AM.png&quot; alt=&quot;Screen-Shot-2019-05-10-at-9.52.49-AM&quot; /&gt;&lt;/p&gt;
    &lt;h1 id=&quot;design-patterns&quot;&gt;Design Patterns&lt;/h1&gt;
    &lt;h4 id=&quot;s3--emrfs--hdfs&quot;&gt;S3 &amp;amp; EMRFS &amp;gt; HDFS&lt;/h4&gt;
    &lt;p&gt;This is pushed by AWS as the best option for most workloads.&lt;img src=&quot;https://blog.ippon.tech/content/images/2019/05/Screen-Shot-2019-05-10-at-9.55.39-AM.png&quot; alt=&quot;Screen-Shot-2019-05-10-at-9.55.39-AM&quot; /&gt;&lt;/p&gt;
    &lt;h4 id=&quot;s3--hdfs&quot;&gt;S3 &amp;amp; HDFS&lt;/h4&gt;
    &lt;p&gt;Store data on S3 and copy to HDFS.  Introduces start up latency, but is preferred for iterative workloads to save on S3 GET requests.&lt;img src=&quot;https://blog.ippon.tech/content/images/2019/05/Screen-Shot-2019-05-10-at-9.55.46-AM.png&quot; alt=&quot;Screen-Shot-2019-05-10-at-9.55.46-AM&quot; /&gt;&lt;/p&gt;
    &lt;h4 id=&quot;hdfs-with-s3-backup&quot;&gt;HDFS with S3 Backup&lt;/h4&gt;
    &lt;p&gt;Use the HDFS on the core nodes, and backup to S3 whenever needed.&lt;/p&gt;
    &lt;h4 id=&quot;manual-tuning&quot;&gt;Manual Tuning&lt;/h4&gt;
    &lt;p&gt;Use EMR console and CloudWatch to tune and configure EMR Cluster to fit your use case.
&lt;img src=&quot;https://blog.ippon.tech/content/images/2019/05/Screen-Shot-2019-05-10-at-9.55.56-AM.png&quot; alt=&quot;Screen-Shot-2019-05-10-at-9.55.56-AM&quot; /&gt;&lt;/p&gt;
    &lt;h4 id=&quot;automatic-tuning&quot;&gt;Automatic Tuning&lt;/h4&gt;
    &lt;p&gt;Use CloudWatch alarms to tune EMR in response to your cluster’s performance monitoring.
&lt;img src=&quot;https://blog.ippon.tech/content/images/2019/05/Screen-Shot-2019-05-10-at-9.56.05-AM.png&quot; alt=&quot;Screen-Shot-2019-05-10-at-9.56.05-AM&quot; /&gt;
This image comes from the white paper.  The image suggests using Elastic Beanstalk as an intermediary between SNS and the EMR API.  The Beanstalk instance must be configured to interpret SNS messages generated by EMR CloudWatch alarms into EMR API commands.  Given the date of publication of this white paper, Beanstalk may not be the best service to use in this case any more.  I would suggest using API Gateway with Lambda functions to convert the SNS messages into EMR API calls; but the specific use case is relevant to the individual workload.&lt;/p&gt;
    &lt;h1 id=&quot;summary-of-themes&quot;&gt;Summary of Themes&lt;/h1&gt;
  &lt;/li&gt;
  &lt;li&gt;S3 with EMRFS and Consistent Views works great on Transient Clusters.&lt;/li&gt;
  &lt;li&gt;Compress your files intelligently based on required compression speeds and ratios.  Adjust your aggregated file size to reflect the splittability of the compression algorithm chosen.  If you cannot split the compressed files, ensure your files are no larger than 1GB.&lt;/li&gt;
  &lt;li&gt;Do not use S3 for workloads which consistently read against the log data&lt;/li&gt;
  &lt;li&gt;Purchase Reserved Instances to cover baseline, predictable workloads.  Purchase Spot instances for Task nodes, but not Core and Master nodes as the immediate removal of a Core or Master node could compromise the cluster’s health.&lt;/li&gt;
  &lt;li&gt;Partition your data intelligently, based on how you will use it.  If your log data is time sensitive, partition the logs based on time.  Make sure your files are on the larger side to take advantage of EMRFS/HDFS file processing.&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Dan Ferguson</name></author><summary type="html">This blog post summarizes the main points in the AWS white paper titled “Best Practices for Amazon EMR” written by Parviz Deyhim in August 2013. The paper can be found here and I encourage anyone working with EMR in the long-term to read it, as it is full of easy to understand concepts which will improve your use of EMR. Some of the technical details are a little dated though, so anything very detailed should be double checked. Those details are beyond the scope of this post; readers of this post should be looking to refresh their memories at a high level the best strategies for using EMR.</summary></entry><entry><title type="html">Using Swagger to Build Effective APIs Part 3</title><link href="http://localhost:4000/posts/using-swagger-to-build-effective-apis-part-3" rel="alternate" type="text/html" title="Using Swagger to Build Effective APIs Part 3" /><published>2019-04-29T00:00:00-04:00</published><updated>2019-04-29T00:00:00-04:00</updated><id>http://localhost:4000/posts/using-swagger-to-build-effective-apis-part-3</id><content type="html" xml:base="http://localhost:4000/posts/using-swagger-to-build-effective-apis-part-3">&lt;p&gt;This post is a continuation &lt;a href=&quot;https://blog.ippon.tech/using-swagger-to-build-effective-apis-pt2/&quot;&gt;in a discussion&lt;/a&gt; on developing APIs which prescribe to the Open API 3.0 specification using Swagger tools.  In this post, we will continue our dicussion with adding security to your API and testing your security configurations using Swagger Hub.&lt;/p&gt;

&lt;h2 id=&quot;security-schemes&quot;&gt;Security Schemes&lt;/h2&gt;
&lt;p&gt;Recall from the first post in this discussion the section on schemas to describe our API models.  These schemas lived under the components section of an OAS 3.0 compliant API.  Security schemes are deployed in the same way.  Using OAS 3.0 notation, we can define multiple security schemes underneath the component section of your API.  Once you’ve defined your security schemes, you apply these schemes using the &lt;code class=&quot;highlighter-rouge&quot;&gt;security&lt;/code&gt; tag, either at the root of your API, or against individual paths.  The nesting quality of the security tag allows you to customize access to your API in a very deterministic and detailed way.&lt;br /&gt;
    Additionally, some security schemes come with customizable “scopes” (think read or write, admin or guest) which we can apply to our API and endpoints in the same way.  This provides for more granular security across our API.  We’ll explore exactly what I mean using the workout API from the previous posts; but first, let’s discuss the different OAS 3.0 supported security paradigms and how we can “scope” them to API paths and apply roles to our security.&lt;/p&gt;

&lt;h3 id=&quot;basic-authentication&quot;&gt;Basic Authentication&lt;/h3&gt;
&lt;p&gt;Basic Authentication is the most primitive authentication scheme available to you.  If you’re familiar with the HTTP protocol, you’ll know this scheme is built straight into HTTP using the “Authorization” header.  The username and password are concatenated with a “:” and are converted into their base-64 encoding.  The resulting mish-mosh of characters, along with the “Basic” specifier, is your authorization token.  There’s not much else to discuss here, especially as it applies to OAS 3.0.&lt;br /&gt;
    Defining Basic Authentication in your security schemes takes the form&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;securitySchemes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;basicAuth&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# &amp;lt;-- arbitrary name for the security scheme&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;basic&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;If you were to employ Basic Authentication against an endpoint, it would take the form&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;/something&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;security&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;basicAuth:[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Please notice two important things here.  First, the security tag mentions &lt;code class=&quot;highlighter-rouge&quot;&gt;basicAuth&lt;/code&gt; as a scheme.  This is not a keyword, nor does OAS 3.0 recognize this string as being Basic Authentication.  The only reason the string &lt;code class=&quot;highlighter-rouge&quot;&gt;basicAuth&lt;/code&gt; is associated with Basic Authentication is because of how it is defined above in the security schemes section.  Within the &lt;code class=&quot;highlighter-rouge&quot;&gt;basicAuth&lt;/code&gt; tag we define &lt;code class=&quot;highlighter-rouge&quot;&gt;scheme: basic&lt;/code&gt; as the scheme.  The scheme key is how you truly specify which authentication scheme you are employing; the name of the scheme is irrelevant, and it serves only to identify that scheme for future use in your API.
    The second important detail to notice in this example is the square brackets after the &lt;code class=&quot;highlighter-rouge&quot;&gt;basicAuth&lt;/code&gt; under the security tag.  This is semantically required by OAS 3.0 to support the “scoping” of authentication schemes.  Because Basic Authentication is so simple, we do not have to worry about scopes when using it.  That is why the square brackets are empty.  We will see scopes being used in more detail later in this post, but for now it is important to recognize where they are used and why this notation exist.&lt;/p&gt;

&lt;h3 id=&quot;bearer-authentication&quot;&gt;Bearer Authentication&lt;/h3&gt;
&lt;p&gt;Bearer Authentication is a token-based HTTP scheme which similarly employs the Authorization HTTP header.  This scheme works similarly to the Basic Authentication scheme, except instead of “Basic &lt;code class=&quot;highlighter-rouge&quot;&gt;base64 encoded username:password&lt;/code&gt;” being passed to the Authorization header, the string “Bearer &lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;” is passed to the Authorization header.  This token is usually disseminated to users in an e-mail after they have confirmed their intent to use your API, or after they have paid for a service plan.  You can specify the use of Bearer Authentication in your API using the OAS 3.0 notation below.&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;securitySchemes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;bearerAuth&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;            &lt;span class=&quot;c1&quot;&gt;# arbitrary name for the security scheme&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bearer&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;bearerFormat&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;JWT&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;# optional, arbitrary value for documentation purposes&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;/something&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;security&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;bearerAuth&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Notice again the scheme name serves only as an identifier for the scheme later on when applied to an endpoint.  Additionally, this scheme has no scope, and so therefore has empty square brackets when it is employed as a security scheme against an endpoint.&lt;/p&gt;

&lt;h3 id=&quot;api-keys&quot;&gt;API Keys&lt;/h3&gt;
&lt;p&gt;Think of API Key authentication schemes as a more extensible Bearer Authentication scheme.  Where Bearer Authentication is passed via the request header only, API Keys can be passed in the request body, the request header, or as a cookie.&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 1) Define the key name and location&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;securitySchemes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ApiKeyAuth&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# arbitrary name for the security scheme&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apiKey&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;header&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;# can be &quot;header&quot;, &quot;query&quot; or &quot;cookie&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;X-API-KEY&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# name of the header, query parameter or cookie&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 2) Apply the API key globally to all operations&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;security&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ApiKeyAuth&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[]&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;# use the same name as under securitySchemes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As was the case with Basic and Bearer Authentication, API Keys do not have API based scopes, hence the square brackets.  This makes sense because API Keys are traditionally provisioned from the APIs backend.  The backend logic which provisions these API keys will keep track of permissions associated with the keys.  Therefore, keeping track of key permissions via scopes at the API layer is not only redundant, but could be completely wrong.  There’s no way your API can reflect in its specification the permissions associated with a backend generated key.  If we consider an API Key a glorified username and password or a bearer token, this logic applies transitively to Basic and Bearer Authentication schemes.  In short, the empty brackets defining scope are reserved for our last scheme, OAuth2.&lt;/p&gt;

&lt;h3 id=&quot;oauth2-connect&quot;&gt;OAuth2 Connect&lt;/h3&gt;
&lt;p&gt;The below ASCII art taken from the &lt;a href=&quot;https://tools.ietf.org/html/rfc6749&quot;&gt;OAuth 2.0 RFC&lt;/a&gt; succinctly summarizes the basic idea behind how OAuth 2.0 will authorize access to a resource.&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;+--------+                               +---------------+
|        |--(A)- Authorization Request -&amp;gt;|   Resource    |
|        |                               |     Owner     |
|        |&amp;lt;-(B)-- Authorization Grant ---|               |
|        |                               +---------------+
|        |
|        |                               +---------------+
|        |--(C)-- Authorization Grant --&amp;gt;| Authorization |
| Client |                               |     Server    |
|        |&amp;lt;-(D)----- Access Token -------|               |
|        |                               +---------------+
|        |
|        |                               +---------------+
|        |--(E)----- Access Token ------&amp;gt;|    Resource   |
|        |                               |     Server    |
|        |&amp;lt;-(F)--- Protected Resource ---|               |
+--------+                               +---------------+
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;OAuth 2.0 is widely regarded as the standard for authorization.  It is a complex paradigm whose details are beyond the scope of this article.  For more information, check out the &lt;a href=&quot;https://oauth.net/2/&quot;&gt;OAuth 2.0&lt;/a&gt; information page.&lt;br /&gt;
    A quick summary of OAuth2 as it applies to OAS 3.0 requires the understanding of grant types, referred to as flows in Swagger notation.  These flows define actions which a seperate authentication server will authorize against your API.  This decouples authorization from your API.  OAS 3.0 has supports several OAuth2.0 flows, each flow having its own purpose and sub-key API specifications.  For a detailed look at how OAuth2.0 is specified using OAS 3.0, I strongly recommend &lt;a href=&quot;https://swagger.io/docs/specification/authentication/oauth2/&quot;&gt;checking the documentation&lt;/a&gt;.  This article is about using Swagger tools to secure your API, not about the finer points of OAuth2.0.
    It is worth mentioning that OAuth2 schemes utilize scopes with Swagger development.  When defining your OAuth2 scheme in your API, you simultaneously define scopes&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;securitySchemes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;oAuthSample&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;oauth2&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;flows&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;implicit&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;authorizationUrl&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://api.example.com/oauth2/authorize&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;scopes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;read_pets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;read pets in your account&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;write_pets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;modify pets in your account&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;/pets/{petId}&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Updates a pet in the store&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;security&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;oAuthSample&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;write_pets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;From the above example, you can see we’ve defined two scopes which boil down to read and write access for users.  We’ve applied the “write” scope to the &lt;code class=&quot;highlighter-rouge&quot;&gt;/pets/{petId}&lt;/code&gt; endpoint, indicating the use of this endpoint is reserved for those users with “write_pets” authorizations.  This is the power of scopes in Swagger API development; they let us lock down whole APIs or individual endpoints based on very customizable access settings.&lt;/p&gt;

&lt;h2 id=&quot;securing-your-security&quot;&gt;Securing your Security&lt;/h2&gt;
&lt;p&gt;It is worth noting Basic, Bearer, and API Key Authentication are easily reversible or spoofable.  By inspecting packets, you can easily hijack API Keys or Bearer Tokens.  With Basic Authentication, you can even reverse engineer usernames and password.  These schemes should always be employed over an encrypted channel like HTTPS.  By using SSL/TLS encryption, your request headers, cookies, and query strings will be encrypted, thus keeping your authorization keys secure when using the API.&lt;/p&gt;

&lt;h2 id=&quot;deploying-your-secure-api&quot;&gt;Deploying your Secure API&lt;/h2&gt;
&lt;p&gt;When you have finishing locking down your API endpoints using the described authorization methods, you can very easily generate stubbed server methods.  For example, I added Basic Authentication to one of the methods in the API example from previous posts on this topic and exported the stubbed server in Spring.  The YAML for that GET method was&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;/exercises&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Returns a paginated list of exercises&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Returns a paginated list of exercises&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Exercise&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;security&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;BasicAuth&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[]&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Sample&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/exercises&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;endpoint.'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;This&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;operation,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;defined&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;noun&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exercises&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;verb&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;implies&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;we&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;will&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;making&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;against&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;API,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;will&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;multiple&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Exercise&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;response.'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;operationId&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;getAllExercises'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;200'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Successfully retrieved paginated list of all Exercise objects&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;array&lt;/span&gt;
                    &lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                        &lt;span class=&quot;s&quot;&gt;$ref&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Exercise'&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;401'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;$ref&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/responses/UnauthorizedError'&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;500'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Server error prevented successful retrieval&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The resulting stubbed method generated by Swagger for me was&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@ApiOperation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Sample GET operation on the /exercises endpoint.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nickname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;getAllExercises&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;This operation, defined by the noun \&quot;exercises\&quot; and the verb \&quot;GET\&quot; implies we will be making an HTTP GET request against the API, will receive multiple Exercise objects in the response.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exercise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;List&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorizations&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Authorization&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BasicAuth&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;={&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Exercise&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@ApiResponses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; 
    &lt;span class=&quot;nd&quot;&gt;@ApiResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Successfully retrieved paginated list of all Exercise objects&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exercise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseContainer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;List&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ApiResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Authentication information is missing or invalid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@ApiResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Server error prevented successful retrieval&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/exercises&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;produces&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Exercise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getAllExercises&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Why is this useful?  Well, as an architect designing an API to be written by an application developer, it may not be instantly clear which methods will be secured and how.  But when authoring APIs using Swagger Hub and generating stubbed server code in this way, it is nearly impossible to introduce developer errors into your code base.  Each stubbed method is fully annotated; the functionality is explicitly defined in a way that is easily recognized by architects and developers alike.
    Furthermore, as an application developer looking to utilize this API endpoint, it is easy to see from the documentation page how to utilize this method.  By clicking on the “lock” icon next to the method I am trying to use, I can quickly see how I need to write my application to utilize this API endpoint.
    &lt;img src=&quot;https://blog.ippon.tech/content/images/2019/04/Using-Swagger-to-Build-Effective-APIs-Part-3.png&quot; alt=&quot;Using-Swagger-to-Build-Effective-APIs-Part-3&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
&lt;p&gt;Swagger Hub is a powerful and concise tool used to author explicit and well-defined APIs.  When used properly, Swagger can bridge the gap between architects, back-end developers, and front-end developers by creating an organic, dynamic representation of your API should be used.  Furthermore, the code-generation tools used by Swagger allow it to generate code agnostic APIs that fit your business use case and your developer’s skill sets.  Furthermore, Swagger’s strong adherence to the Open-API Specification 3.0 allows your API to be well-understood across all industries.  No matter how amazing a product is, if it is difficult to use, no one will use it.  Tools like Swagger help keep APIs easy to understand, easy to use, easy to document, and easy to develop against.&lt;/p&gt;</content><author><name>Dan Ferguson</name></author><summary type="html">This post is a continuation in a discussion on developing APIs which prescribe to the Open API 3.0 specification using Swagger tools. In this post, we will continue our dicussion with adding security to your API and testing your security configurations using Swagger Hub.</summary></entry><entry><title type="html">Using Swagger to Build Effective APIs Part 2</title><link href="http://localhost:4000/posts/using-swagger-to-build-effective-apis-part-2" rel="alternate" type="text/html" title="Using Swagger to Build Effective APIs Part 2" /><published>2019-02-25T00:00:00-05:00</published><updated>2019-02-25T00:00:00-05:00</updated><id>http://localhost:4000/posts/using-swagger-to-build-effective-apis-part-2</id><content type="html" xml:base="http://localhost:4000/posts/using-swagger-to-build-effective-apis-part-2">&lt;p&gt;This post is a continuation &lt;a href=&quot;https://blog.ippon.tech/using-swagger-to-build-effective-apis-pt1/&quot;&gt;in a discussion&lt;/a&gt; on developing APIs which prescribe to the Open API 3.0 specification using Swagger tools.  In this post, we will continue our dicussion with writing paths for your API and testing those paths using Swagger Hub.&lt;/p&gt;

&lt;h2 id=&quot;paths-sections&quot;&gt;Paths Sections&lt;/h2&gt;
&lt;p&gt;The third and most important component to an API specification is the paths section.  Here is the meat and potatoes of the API, the definitions behind how it will be used by developers in the future.  Let’s look at a simple example of two paths this API could take for the exercise resource:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;/exercises&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Returns a paginated list of exercises&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Returns a paginated list of exercises&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Exercise&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Sample&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;operation&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/exercises&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;endpoint.'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;This&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;operation,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;defined&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;by&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;noun&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;exercises&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;verb&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;implies&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;we&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;will&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;be&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;making&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;HTTP&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;against&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;API,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;will&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;multiple&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Exercise&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;objects&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;response.'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;operationId&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;getAllExercises'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;200'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Successfully retrieved paginated list of all Exercise objects&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;array&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                  &lt;span class=&quot;s&quot;&gt;$ref&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Exercise'&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;500'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Server error prevented successful retrieval&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;/exercises/{id}&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Returns an exercise based on the ID passed&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Returns an exercise based on the ID passed&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Exercise ID&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Returns&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;exercise&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;based&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;passed&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Returns&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;an&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;exercise&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;based&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;the&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ID&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;passed&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;id&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Exercise ID&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;integer&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;int64&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;operationId&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;getExerciseByID'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;200'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Successfully retrieved a single Exercise object&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;$ref&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Exercise'&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;/exercises/exercise&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;POST a new exercise&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;POST a new exercise&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Exercise&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;operationId&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;postExercise'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;exercise&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;POST&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;exercise&quot;&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;requestBody&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;s&quot;&gt;$ref&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Exercise'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;202'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Payload was accepted&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;$ref&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Exercise'&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;400'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Back-end was unavailable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The example above shows two GET endpoints that define operations on the exercise resource defined in the components section of the specification.  You’ll notice for each endpoint we define an HTTP Method (at least one), any relevant parameters associated with that method request, and the expected responses that come from that request path are mapped to components with the &lt;code class=&quot;highlighter-rouge&quot;&gt;$ref&lt;/code&gt; tag.&lt;/p&gt;

&lt;p&gt;Pathing is a complex topic in API development.  There are many things to consider when defining API paths, like HTTP Headers, HTTP Methods, endpoint names, response types, versions, etc.  For example, you will notice each API path I have specified is a noun.  This noun is either singular or plural, depending on the number of objects returned by the response definition.&lt;/p&gt;

&lt;p&gt;The only verbs in this API design are the HTTP verbs, which is as it should be.  Some developers may be tempted to say &lt;code class=&quot;highlighter-rouge&quot;&gt;http://www.myapi.com/getAllExercises&lt;/code&gt;.  This is not good practice; behind the scenes, this operation is a &lt;code class=&quot;highlighter-rouge&quot;&gt;GET getAllExercises&lt;/code&gt;, which is redundant.  Instead, define your API paths as nouns and use the HTTP operations as verbs.&lt;/p&gt;

&lt;p&gt;If you can concatenate the two and create a sensible phrase, you have successfully defined a logical endpoint like &lt;code class=&quot;highlighter-rouge&quot;&gt;POST exercise&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;GET exercises&lt;/code&gt;.  The use of verbs to define REST API operations is a tricky business and is generally considered bad practice.  However, if you are defining a different kind of API, like SOAP or more generally RPC, this is good practice.  RPC APIs are beyond the scope of this post, but if you would like to do more reading, I would suggest &lt;a href=&quot;https://www.smashingmagazine.com/2016/09/understanding-rest-and-rpc-for-http-apis/&quot;&gt;this article&lt;/a&gt;, which neatly defines the differences between REST APIs and RPC type APIs.&lt;/p&gt;

&lt;p&gt;Usually, APIs are written by architects, for developers.  This immediately implies a paradigm shift will be required in order to keep your API future proof from developer requests.  If you want to design your API so it is easily upgradeable, easily maintainable, and easily understood by both users and developers, check out these articles: &lt;a href=&quot;https://hackernoon.com/restful-api-design-step-by-step-guide-2f2c9f9fcdbf&quot;&gt;API Design&lt;/a&gt; and &lt;a href=&quot;https://hackernoon.com/restful-api-designing-guidelines-the-best-practices-60e1d954e7c9&quot;&gt;API Best Practices&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;test-your-swagger-using-swagger-hub-tools&quot;&gt;Test your Swagger using Swagger Hub tools&lt;/h1&gt;
&lt;p&gt;Once you’ve built your API Specification using the Swagger Editor, you have to test it.  By far, the easiest way you can test your API specification is to copy it from the Swagger Editor and paste it into Swagger Hub.  This will, of course, require you to sign-in to Swagger Hub and create a new API; but the ease of testing involved make the process well worth it.  Additionally, you can make any new API private on Swagger Hub, if you are concerned others may poach your API.&lt;/p&gt;

&lt;p&gt;Once you’ve pasted your API into the Swagger Hub, you’ll notice the UI will take on a very similar look and feel as the Swagger Editor.  They are not identical displays however; in fact, you may notice that Swagger Hub adds a server line for you.  This is what Swagger Hub added to the server section of my API&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# Added by API Auto Mocking Plugin&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SwaggerHub API Auto Mocking&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;https://virtserver.swaggerhub.com/dferguson992/aspotr/1.0.0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is a virtual server used to mock requests to your API.  Your username, API name, and API Version number all define the URL of the mock server.  You cannot ping the server, but you can run curl commands against API endpoints hosted on the server.  These API endpoints are pulled straight from your specification and will send mock data to your endpoints so you can physically see the responses.  Furthermore, you are free to modify the mock data to fit any edge cases you may want to program into your application in the future.  It is important to note, this is just a sanity test designed to allow you to see the specified output of your API.  You should not use the mock endpoints to actually test your business logic.  The mock endpoint is created solely for the purpose of viewing and verifying the expected output.&lt;/p&gt;

&lt;p&gt;Let’s look at a few of the examples from the demo API:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;s2&quot;&gt;&quot;https://virtserver.swaggerhub.com/dferguson992/aspotr/1.0.0/exercises&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;accept: application/json&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; : 0,
  &lt;span class=&quot;s2&quot;&gt;&quot;sets&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; : 0,
    &lt;span class=&quot;s2&quot;&gt;&quot;exercise&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; : 0,
      &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;primaryMuscleGroupId&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; : 0,
        &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;movementModifier&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;isolation&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;repetitions&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; : 0,
      &lt;span class=&quot;s2&quot;&gt;&quot;weight&quot;&lt;/span&gt; : 0,
      &lt;span class=&quot;s2&quot;&gt;&quot;system&quot;&lt;/span&gt; : &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;repetitionModified&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;tempo&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;avgRestTime&quot;&lt;/span&gt; : 0
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; GET &lt;span class=&quot;s2&quot;&gt;&quot;https://virtserver.swaggerhub.com/dferguson992/aspotr/1.0.0/exercises/1&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;accept: application/json&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; : 0,
  &lt;span class=&quot;s2&quot;&gt;&quot;sets&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; : 0,
    &lt;span class=&quot;s2&quot;&gt;&quot;exercise&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; : 0,
      &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;primaryMuscleGroupId&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; : 0,
        &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;movementModifier&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;isolation&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;repetitions&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; : 0,
      &lt;span class=&quot;s2&quot;&gt;&quot;weight&quot;&lt;/span&gt; : 0,
      &lt;span class=&quot;s2&quot;&gt;&quot;system&quot;&lt;/span&gt; : &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;repetitionModified&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;tempo&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;avgRestTime&quot;&lt;/span&gt; : 0
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;As you can see, these two GET requests return basic Exercise objects.  This mocking allows us to view the exercises as they would be returned from the API.  This is important, as it allows us to easily define improved endpoints for future releases of the API.  Seeing the results of the endpoint requests, even if they are mocked, will always be more valuable than writing the specification and never seeing it in action until business logic is written.&lt;/p&gt;

&lt;p&gt;We can even modify the request body of the POST endpoint we defined earlier:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-X&lt;/span&gt; POST &lt;span class=&quot;s2&quot;&gt;&quot;https://virtserver.swaggerhub.com/dferguson992/aspotr/1.0.0/exercises/exercise&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;accept: application/json&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Content-Type: application/json&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;:1,&lt;span class=&quot;s2&quot;&gt;&quot;sets&quot;&lt;/span&gt;:[&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;exercise&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;stricription&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;primaryMuscleGroupId&quot;&lt;/span&gt;:&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;movementModifier&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;isolation&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;repetitions&quot;&lt;/span&gt;:[&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;weight&quot;&lt;/span&gt;:0,&lt;span class=&quot;s2&quot;&gt;&quot;system&quot;&lt;/span&gt;:true,&lt;span class=&quot;s2&quot;&gt;&quot;repetitionModified&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;tempo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}]&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;avgRestTime&quot;&lt;/span&gt;:0&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; : 0,
  &lt;span class=&quot;s2&quot;&gt;&quot;sets&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; : 0,
    &lt;span class=&quot;s2&quot;&gt;&quot;exercise&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; : 0,
      &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;primaryMuscleGroupId&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; : 0,
        &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;movementModifier&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;isolation&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;repetitions&quot;&lt;/span&gt; : &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt; : 0,
      &lt;span class=&quot;s2&quot;&gt;&quot;weight&quot;&lt;/span&gt; : 0,
      &lt;span class=&quot;s2&quot;&gt;&quot;system&quot;&lt;/span&gt; : &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,
      &lt;span class=&quot;s2&quot;&gt;&quot;repetitionModified&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;tempo&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
    &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt; : &lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;avgRestTime&quot;&lt;/span&gt; : 0
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;We defined the payload as an exercise containing just default values for each field, and passed it in JSON to the curl statement under the &lt;code class=&quot;highlighter-rouge&quot;&gt;-d&lt;/code&gt; flag.  As you can see, our API returned a sample exercise object that deviated from our payload.  It is difficult to see at first, but if you look closely you will see we passed an exercise with an id of “1” to the curl statment, and received an exercise with an id of “0” in the response body.  This is a short-coming inherent to mocking.  In our API specification, we may have intended our API to return the exact response we sent, but there is no way to emulate this behavior in a mock.  This is because REST APIs are stateful.  There is no way for us to emulate this intended behavior without designing business logic.  Situations like these are important to pay close attention to when mocking an API, as they may reveal flaws in your assumption about how your API will work.&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;
&lt;p&gt;Swagger is a great toolset for anyone looking to develop an API.  For those of us looking to write APIs, you should always adhere to a common standard which will make your API usable.  That is why you should use the OAS 3.0.n specification for your API.  APIs that do not adhere to this design have the potential to be difficult to use and maintain.  Any tool that is difficult to maintain will not be used.&lt;/p&gt;

&lt;p&gt;Inversely, Swagger is a tool that is very easy to use, which is why I have developed this demo API using Swagger tools in the first place.  Some of the additional benefits of Swagger tools include their portability.  Swagger Hub will let you generate templated client and server code in nearly any language you want.  This allows you to rapidly prototype APIs for the future.&lt;/p&gt;

&lt;p&gt;For example, AWS API Gateway will generate all of the features of your OAS compliant API like models and routes, will help you test your API, and will even deploy your API in a serverless context using AWS Lambda to handle endpoint calls.  The only thing API Gateway needs to get started is a Swagger document.  Maven has a swagger plug-in which takes a definition YAML file and generates client models on the fly so you can rapidly prototype an application for your API.  If the API changes, you just update the definition file and your API code will change with it.  Swagger is the toolset for helping architects write APIs quickly, and OAS 3.0.n allows these APIs to be used by everyone.&lt;/p&gt;

&lt;p&gt;If something in this article piqued your interest and you would like more information on JHipster or the services we offer at Ippon USA we’d love to hear from you! Please contact us at contact@ippon.tech with your questions and inquiries.&lt;/p&gt;</content><author><name>Dan Ferguson</name></author><summary type="html">This post is a continuation in a discussion on developing APIs which prescribe to the Open API 3.0 specification using Swagger tools. In this post, we will continue our dicussion with writing paths for your API and testing those paths using Swagger Hub.</summary></entry><entry><title type="html">Using Swagger to Build Effective APIs Part 1</title><link href="http://localhost:4000/posts/using-swagger-to-build-effective-apis-part-1" rel="alternate" type="text/html" title="Using Swagger to Build Effective APIs Part 1" /><published>2019-02-25T00:00:00-05:00</published><updated>2019-02-25T00:00:00-05:00</updated><id>http://localhost:4000/posts/using-swagger-to-build-effective-apis-part-1</id><content type="html" xml:base="http://localhost:4000/posts/using-swagger-to-build-effective-apis-part-1">&lt;p&gt;The rise of serverless computing and platform agnostic, app-based services use has forced the casual developer to learn proper API development, a task usually reserved for platform architects.  Unfortunately, there are many programmers, start-ups, and full-fledged companies that do not adhere to proper API development and maintenance. The skillsets and mindsets involved in creating APIs are different from those involved in developing the business logic which uses an API.&lt;/p&gt;

&lt;p&gt;This schism does not affect developers or architects; it only affects the users of the API.  Poorly developed or poorly documented APIs which are susceptible to frequent changes or misleading design decisions are difficult to use.  If a product is difficult to use it likely will not be used at all, especially if that product is an API.  The good news is there are specifications and tools which aid in the development of easy to use APIs that change as fast as your business.  I am speaking specifically about the Open API Specification and Swagger.&lt;/p&gt;

&lt;h1 id=&quot;openapi-initiative-and-swagger&quot;&gt;OpenAPI Initiative and Swagger&lt;/h1&gt;
&lt;p&gt;As REST APIs became more prevalent across the Internet, the standards used to develop them became more varied.  To fix this issue, a bunch of companies got together and created the &lt;a href=&quot;https://www.openapis.org/about&quot;&gt;OpenAPI Initiative&lt;/a&gt;.  This initiative sought to codify and finalize a standard ruleset for REST API development.  Since the inception of this open source group, the OpenAPI Specification (OAS) has gone through 3 versions, the last two of which are fully supported by the &lt;a href=&quot;https://swagger.io/solutions/getting-started-with-oas/&quot;&gt;Swagger API Editor&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Swagger is a company that creates and supports open source API development tools.  Many of these tools are available on their website, or as we will shortly see as Docker containers.  These tools like Swagger Hub, Swagger Editor, Swagger UI, and Swagger Validator all work together to aid in developing proper APIs.  Furthermore, all Swagger tools support the OAS 3.0.n specification.  This fact makes adhering to OAS standards very easy when using Swagger tools.&lt;/p&gt;

&lt;p&gt;The exact rules defining OAS are on &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification&quot;&gt;Github&lt;/a&gt; for any user to peruse, but tools like Swagger make conforming to these rules easy for anyone.  You do not have to be familiar with every detail of the OpenAPI specification to develop an API which conforms to said specification.  The rules themselves are very detailed, and describing each one in this blog post would be redundant.  Instead, we are going to use Swagger to build a demo REST API which conforms to OpenAPI standards and syntax.  After walking through this tutorial, I encourage the reader to browse the specification in more detail.  I will cover as many features of the OpenAPI version 3.0.0 specification as possible in this article, but the most detail can be found in &lt;a href=&quot;https://swagger.io/solutions/getting-started-with-oas/&quot;&gt;the specification itself&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;what-is-this-api-going-to-do&quot;&gt;What is this API going to do?&lt;/h1&gt;
&lt;p&gt;Every API needs to have a purpose which defines how it will be used.  Personally, I love to exercise.  Going to the gym, taking a fitness class, and running are all ways I like to workout.  But as my workouts become more varied, it is difficult to track my progress from workout to workout.  We are going to develop a sample API which will help me track my exercises, no matter how varied they are.&lt;/p&gt;

&lt;p&gt;Take a look at this graphic:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ippontech/blog-usa/master/images/2019/02/aspotr_umls.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we define a workout as an array of exercises.  Each exercise is a combination of sets with a rest time.  Each set is an array of repetitions defined primarily by a weight, as well as a lift, which is defined primarily by an affected muscle group.  Now we have the framework to easily define a weight lifting workout.  How do we translate this diagram of loose fitting parts into an API?&lt;/p&gt;

&lt;p&gt;There are three steps we will need to take to turn these UML diagrams into tangible JSON packets.  The first step is to set up our local Swagger development environment.  The second is to populate our API definitions with some sample paths.  The last step is to test these sample paths using Swagger’s testing tools on Swagger Hub.  It is important to note that because we are using Swagger tools to develop our API, we will automatically be prescribing to OAS 3.0 standards, ensuring our API will be easy to use for developers.&lt;/p&gt;

&lt;h1 id=&quot;setting-up-swagger-editor&quot;&gt;Setting up Swagger-Editor&lt;/h1&gt;
&lt;p&gt;If you prefer to work entirely online, feel free to check out &lt;a href=&quot;https://swagger.io/&quot;&gt;Swagger.io&lt;/a&gt;.  Their service, Swagger Hub, functions exactly like Swagger Editor, and it even includes testing features which we will explore later.  Personally, I prefer to use Docker containers so I do not always have to be connected to the Internet.  If you do decide to use Swagger Hub, you can skip over this portion of the post.&lt;/p&gt;
&lt;h2 id=&quot;macos&quot;&gt;MacOS&lt;/h2&gt;
&lt;p&gt;For MacOS, install Docker on your laptop by running the following in a terminal:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install docker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;windows&quot;&gt;Windows&lt;/h2&gt;
&lt;p&gt;For Windows, navigate to the &lt;a href=&quot;https://download.docker.com/win/stable/Docker%20for%20Windows%20Installer.exe&quot;&gt;Docker download link&lt;/a&gt; and follow the prompts until Docker is installed.&lt;/p&gt;
&lt;h2 id=&quot;next-steps&quot;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Once Docker is installed, run the &lt;code class=&quot;highlighter-rouge&quot;&gt;docker search swagger&lt;/code&gt; command using the docker CLI to search for the swagger editor container.  It is important to note here, we want the swaggerapi/swagger-editor image.  The swagger-ui image is better for presenting API documentation in a web browser.  The swagger-generator image starts a web server that will generate clients or servers in a RESTful context when given an API as input.  The swagger-validator image is used for assigning Swagger badges to Github repositories.  In this instance, we only care about the swagger-editor image, as it will allow us to deploy a local web service that we can use to edit our API without logging into Swagger’s online services.&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker search swagger
NAME                                     DESCRIPTION                                     STARS               OFFICIAL
swaggerapi/swagger-editor                The swagger-editor web service                  240
swaggerapi/swagger-ui                    A simple docker container &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;hosting swagge…   145
swaggerapi/swagger-generator             The swagger codegen web service                 66
......
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;$&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker pull swaggerapi/swagger-editor
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Once you have your container downloaded, run the following command to start the container and map the container port 8080 to your computer’s port 8080&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker run &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 127.0.0.1:8080:8080 swaggerapi/swagger-editor &amp;amp;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This should start the container, but we can confirm by running &lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt; which should give output similar to the following:&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;docker ps
CONTAINER ID        IMAGE                       COMMAND                  CREATED             STATUS                  PORTS                      NAMES
258a99d971e9        swaggerapi/swagger-editor   &lt;span class=&quot;s2&quot;&gt;&quot;sh /usr/share/nginx…&quot;&lt;/span&gt;   1 second ago        Up Less than a second   127.0.0.1:8080-&amp;gt;8080/tcp   elated_margulis
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;By navigating to port 8080 in our browser, we can see the default Swagger Editor UI.  You should see the standard Pet Store sample API definition in the Swagger UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/ippontech/blog-usa/master/images/2019/02/swagger-default-ui.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Pet Store API is the sample API for the Swagger 2.0 specification.  In the next section, we’ll explore how we can convert this API into an OpenAPI 3.0 Specification API, in accordance with the UML diagrams above.&lt;/p&gt;

&lt;h3 id=&quot;swagger-editor-vs-swagger-hub&quot;&gt;Swagger-Editor vs. Swagger Hub&lt;/h3&gt;
&lt;p&gt;If the above steps were at all difficult or prohibitive for you, check out &lt;a href=&quot;https://swagger.io/&quot;&gt;Swagger.io&lt;/a&gt;.  This website hosts all of the web services discussed here in their newest versions.  The only drawback is you will have to login to the Swagger website and host your API there.  If this is not a problem for you, feel free to use Swagger Hub for the remainder of this tutorial.  Both platforms feature Ctrl+Space code completion tips that are essential if you find yourself struggling to format your API properly.  We will be using Swagger Hub later in this post to test our API.&lt;/p&gt;

&lt;h1 id=&quot;configuring-swagger-for-openapi-30-specification&quot;&gt;Configuring Swagger for OpenAPI 3.0 Specification&lt;/h1&gt;
&lt;p&gt;The default Swagger file in the Swagger Editor conforms to Swagger 2.0 (also known as Open API Specification 2.0).  The Swagger Editor supports the generation of clients and servers in nearly any language for the given API so long as that API conforms to the 2.0 specification.  This alone is a strong impetus to retain the 2.0 API specification; but since the goal of this project is to eventually build an API and program its functions using serverless technology, we do not need to generate client and server code to handle API calls.  Even so, it should be noted for those of you using Swagger Hub, the online tool, you can still generate clients and servers against OAS 3.0, you just cannot generate clients and servers against OAS 3.0 using the Swagger Editor container.&lt;/p&gt;

&lt;h2 id=&quot;api-metadata--additional-docs-section&quot;&gt;API Metadata &amp;amp; Additional Docs Section&lt;/h2&gt;
&lt;p&gt;The first component of an OAS 3.0 API is not relevant to the function of the API.  This section of an API specification retains information about the API like which version it is, who wrote the API, servers where you can contact the API, additional documentation, licensing information, and the APIs schema.  In our case, this block of YAML should look similar to the following:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;openapi&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3.0.0&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ASpotr&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1.0.0&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;This is the ASpotr API.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dferguson@ippon.fr&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Daniel Ferguson&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://dferguson992.github.io'&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;license&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Apache 2.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://www.apache.org/licenses/LICENSE-2.0.html'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;servers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://www.aspotr.com'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;variables&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ASpotr API Gateway, ASpotr is serverless&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;externalDocs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Find out more about Swagger&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;http://swagger.io'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The first line defines the specification this API adheres too.  This will usually be &lt;code class=&quot;highlighter-rouge&quot;&gt;swagger: 1.0&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;swagger: 2.0&lt;/code&gt;, or &lt;code class=&quot;highlighter-rouge&quot;&gt;openapi: 3.0.n&lt;/code&gt; where n is some minor version number.  Here I use 3.0.0 for simplicity’s sake.  This first line tells the swagger validator what to expect in the rest of the document, much like defining XSD files in an XML file.  The next block, &lt;code class=&quot;highlighter-rouge&quot;&gt;info&lt;/code&gt;, is for information about the API.  This is an optional component, but it is good practice to specify this block, as well as &lt;code class=&quot;highlighter-rouge&quot;&gt;servers&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;externalDocs&lt;/code&gt; anyway.  This entire section is completely optional, but a good API, especially an open source one, will maintain license and contact information for use by contributors.&lt;/p&gt;

&lt;h2 id=&quot;components-section&quot;&gt;Components Section&lt;/h2&gt;
&lt;p&gt;The second major component to an OAS 3.0 API are the components.  For those of you with an object-oriented programming background, it is easy to think of components as plain objects without any business logic.  In order to build strong path definitions in your API, it is imperative we build strong, well-defined models that can be referenced from your paths.  This is where the UML diagram from above comes in handy.  Considering the UML diagram, we can create API models defined below.  As you read this section, pay close attention to the use of the &lt;code class=&quot;highlighter-rouge&quot;&gt;$ref&lt;/code&gt; tag:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;schemas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;MuscleGroup&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;integer&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;int64&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;The name of the Muscle Group&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Lift&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;integer&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;int64&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;The name of the Exercise&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;primaryMuscleGroupId&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;$ref&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/MuscleGroup'&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;movementModifier&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;-&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;Select these modifiers to further describe the exercise you're&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;doing.&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;enum:&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;- isolation&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;- supination&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;- wide&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;- narrow&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;id&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;primaryMuscleId&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Repetition&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;integer&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;int64&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;integer&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;int64&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;system&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;boolean&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;English(T) or Metric(F) units&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;repetitionModified&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;&amp;gt;-&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;Select these modifiers to further describe the repetition you're doing.&lt;/span&gt;
          &lt;span class=&quot;no&quot;&gt;enum:&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;- tempo&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;- static&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;- plyometric&lt;/span&gt;
            &lt;span class=&quot;no&quot;&gt;- isometric&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;id&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;integer&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;int64&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;exercise&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;$ref&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Lift'&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;repetitions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;array&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;$ref&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Repetition'&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;The name of the set.  Should be autogenerated by the API based on the information within the set.&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;id&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;exercise&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;repetitions&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Exercise&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;integer&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;int64&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;sets&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;array&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;$ref&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Set'&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;avgRestTime&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;integer&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;int64&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;id&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sets&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Workout&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;integer&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;int64&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;exercises&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;array&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;items&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;$ref&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Exercise'&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;id&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;exercises&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Starting with our most primitive objects built on basic data types like MuscleGroup, we can define complex objects like Workout.  The glue that binds these objects together is the &lt;code class=&quot;highlighter-rouge&quot;&gt;$ref&lt;/code&gt; tag.  This tag references another location in your API specification.  When defining models, we use it heavily to build our complex objects based on definitions of simpler objects.  This tag works by defining a structure similar to directories, where the &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; character is the root tag, and the &lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt; character separates each level of the YAML document.&lt;/p&gt;

&lt;p&gt;This structure helps to define components in your API using other, previously defined components.  This tag is incredibly powerful, as it allows you to not only reference components in this document and also reference components in other API specification documents as well.  This is a great strategy if you are linking two or more extraneous APIs, or if you want to keep your component descriptions separated from the rest of your API document.&lt;/p&gt;

&lt;p&gt;It is important to note that the demo API in this post may not be a scalable API design.  For our purposes, this design may work just fine; it is glaringly obvious this design will create large, nested JSON payloads for even the shortest workouts.  The example API in this post implies each transaction is stateful, and payload components are dependent upon other potentially unrelated components.&lt;/p&gt;

&lt;p&gt;For example, say you want to track the number of push-ups you’ve done in a day.  With this API design, you have two choices.  The first is to slowly build your JSON workout object by periodically adding set objects to it throughout the day.  The second option is to send small workout requests objects throughout the day, each containing one exercise of about 20 or so push-ups.&lt;/p&gt;

&lt;p&gt;The first option is not convenient, but it lends itself well to exercise tracking, mainly if you wanted to model the data you’ve collected and build progress projections over time.  This first approach is how one would assume any workout tracking is to be done.  The second approach is much more convenient for the user, even if the machine learning conducted on your data set is blown out of the water if multiple workouts of the same exercise are logged per day.&lt;/p&gt;

&lt;p&gt;For our purposes now, this API will work just fine; but as you continue to read, consider optimizations to the API that would make it scalable and easy to use.  It is essential to think about the API from all perspectives, those modeling the business logic on the back-end, and those submitted REST requests on the front-end.  If you keep these tenants in mind, you can build a much more atomic API that maintains its usability by both developers and users.&lt;/p&gt;

&lt;h1 id=&quot;summary&quot;&gt;Summary&lt;/h1&gt;
&lt;p&gt;This post is the first in a series discussing API development for serverless applications.  In &lt;a href=&quot;https://blog.ippon.tech/using-swagger-to-build-effective-apis-pt2/&quot;&gt;the next post&lt;/a&gt;, we will discuss developing API paths in your Swagger specification, and how to test that API specification using Swagger tools.&lt;/p&gt;

&lt;p&gt;If something in this article piqued your interest and you would like more information on JHipster or the services we offer at Ippon USA we’d love to hear from you! Please contact us at contact@ippon.tech with your questions and inquiries.&lt;/p&gt;</content><author><name>Dan Ferguson</name></author><summary type="html">The rise of serverless computing and platform agnostic, app-based services use has forced the casual developer to learn proper API development, a task usually reserved for platform architects. Unfortunately, there are many programmers, start-ups, and full-fledged companies that do not adhere to proper API development and maintenance. The skillsets and mindsets involved in creating APIs are different from those involved in developing the business logic which uses an API.</summary></entry></feed>